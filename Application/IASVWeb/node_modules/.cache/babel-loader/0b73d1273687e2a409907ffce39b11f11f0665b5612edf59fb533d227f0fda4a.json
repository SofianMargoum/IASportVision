{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport Orientation from './orientation';\nexport const UNLOCK = 'UNLOCK';\nexport const PORTRAIT = 'PORTRAIT';\nexport const LANDSCAPE = 'LANDSCAPE';\nexport const LANDSCAPE_LEFT = 'LANDSCAPE_LEFT';\nexport const LANDSCAPE_RIGHT = 'LANDSCAPE_RIGHT';\nexport const PORTRAIT_UPSIDE_DOWN = 'PORTRAIT_UPSIDE_DOWN';\nexport const ALL_ORIENTATIONS_BUT_UPSIDE_DOWN = 'ALL_ORIENTATIONS_BUT_UPSIDE_DOWN';\nconst stack = [];\nlet immediateId;\nfunction update() {\n  clearImmediate(immediateId);\n  immediateId = setImmediate(() => {\n    let orientation;\n    let length = stack.length;\n    while (!orientation && length--) {\n      orientation = stack[length].orientation;\n    }\n    switch (orientation) {\n      case UNLOCK:\n        Orientation.unlockAllOrientations();\n        break;\n      case PORTRAIT:\n        Orientation.lockToPortrait();\n        break;\n      case LANDSCAPE:\n        Orientation.lockToLandscape();\n        break;\n      case LANDSCAPE_LEFT:\n        Orientation.lockToLandscapeLeft();\n        break;\n      case LANDSCAPE_RIGHT:\n        Orientation.lockToLandscapeRight();\n        break;\n      case PORTRAIT_UPSIDE_DOWN:\n        Orientation.lockToPortraitUpsideDown();\n        break;\n      case ALL_ORIENTATIONS_BUT_UPSIDE_DOWN:\n        Orientation.lockToAllOrientationsButUpsideDown();\n        break;\n    }\n  });\n}\nexport function OrientationLocker({\n  orientation,\n  onChange,\n  onDeviceChange\n}) {\n  const stackEntry = useRef({});\n\n  // didMount: add to stack\n  useEffect(() => {\n    const {\n      current\n    } = stackEntry;\n    stack.push(current);\n\n    // willUnmount: remove from stack\n    return () => {\n      const index = stack.indexOf(current);\n      if (index !== -1) {\n        stack.splice(index, 1);\n      }\n      update();\n    };\n  }, []);\n\n  // props.orientation\n  useEffect(() => {\n    stackEntry.current.orientation = orientation;\n    update();\n  }, [orientation]);\n\n  // props.onChange\n  useEffect(() => {\n    if (onChange) {\n      Orientation.addOrientationListener(onChange);\n      return () => Orientation.removeOrientationListener(onChange);\n    }\n  }, [onChange]);\n\n  // props.onDeviceChange\n  useEffect(() => {\n    if (onDeviceChange) {\n      Orientation.addDeviceOrientationListener(onDeviceChange);\n      return () => Orientation.removeDeviceOrientationListener(onDeviceChange);\n    }\n  }, [onDeviceChange]);\n  return null;\n}","map":{"version":3,"names":["useEffect","useRef","Orientation","UNLOCK","PORTRAIT","LANDSCAPE","LANDSCAPE_LEFT","LANDSCAPE_RIGHT","PORTRAIT_UPSIDE_DOWN","ALL_ORIENTATIONS_BUT_UPSIDE_DOWN","stack","immediateId","update","clearImmediate","setImmediate","orientation","length","unlockAllOrientations","lockToPortrait","lockToLandscape","lockToLandscapeLeft","lockToLandscapeRight","lockToPortraitUpsideDown","lockToAllOrientationsButUpsideDown","OrientationLocker","onChange","onDeviceChange","stackEntry","current","push","index","indexOf","splice","addOrientationListener","removeOrientationListener","addDeviceOrientationListener","removeDeviceOrientationListener"],"sources":["C:/perso/IA Sport Vision/Application/IASV/node_modules/react-native-orientation-locker/src/OrientationLocker.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport Orientation from './orientation';\n\nexport const UNLOCK = 'UNLOCK';\nexport const PORTRAIT = 'PORTRAIT';\nexport const LANDSCAPE = 'LANDSCAPE';\nexport const LANDSCAPE_LEFT = 'LANDSCAPE_LEFT';\nexport const LANDSCAPE_RIGHT = 'LANDSCAPE_RIGHT';\nexport const PORTRAIT_UPSIDE_DOWN = 'PORTRAIT_UPSIDE_DOWN';\nexport const ALL_ORIENTATIONS_BUT_UPSIDE_DOWN = 'ALL_ORIENTATIONS_BUT_UPSIDE_DOWN';\n\nconst stack = [];\n\nlet immediateId;\n\nfunction update() {\n  clearImmediate(immediateId);\n  immediateId = setImmediate(() => {\n    let orientation;\n    let length = stack.length;\n    while (!orientation && length--) {\n      orientation = stack[length].orientation;\n    }\n\n    switch (orientation) {\n      case UNLOCK:\n        Orientation.unlockAllOrientations();\n        break;\n      case PORTRAIT:\n        Orientation.lockToPortrait();\n        break;\n      case LANDSCAPE:\n        Orientation.lockToLandscape();\n        break;\n      case LANDSCAPE_LEFT:\n        Orientation.lockToLandscapeLeft();\n        break;\n      case LANDSCAPE_RIGHT:\n        Orientation.lockToLandscapeRight();\n        break;\n      case PORTRAIT_UPSIDE_DOWN:\n        Orientation.lockToPortraitUpsideDown();\n        break;\n      case ALL_ORIENTATIONS_BUT_UPSIDE_DOWN:\n        Orientation.lockToAllOrientationsButUpsideDown();\n        break;\n    }\n  });\n}\n\nexport function OrientationLocker({\n  orientation,\n  onChange,\n  onDeviceChange,\n}) {\n  const stackEntry = useRef({});\n\n  // didMount: add to stack\n  useEffect(() => {\n    const { current } = stackEntry;\n    stack.push(current);\n\n    // willUnmount: remove from stack\n    return () => {\n      const index = stack.indexOf(current);\n      if (index !== -1) {\n        stack.splice(index, 1);\n      }\n      update();\n    };\n  }, []);\n\n  // props.orientation\n  useEffect(() => {\n    stackEntry.current.orientation = orientation;\n    update();\n  }, [orientation]);\n\n  // props.onChange\n  useEffect(() => {\n    if (onChange) {\n      Orientation.addOrientationListener(onChange);\n      return () => Orientation.removeOrientationListener(onChange);\n    }\n  }, [onChange]);\n\n  // props.onDeviceChange\n  useEffect(() => {\n    if (onDeviceChange) {\n      Orientation.addDeviceOrientationListener(onDeviceChange);\n      return () => Orientation.removeDeviceOrientationListener(onDeviceChange);\n    }\n  }, [onDeviceChange]);\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}