{"ast":null,"code":"// api.js\n\n// Fonction pour rechercher des clubs\nexport const searchClubs = async searchTerm => {\n  try {\n    const response = await fetch(`https://api-dofa.prd-aws.fff.fr/api/clubs?clNom=${searchTerm}`);\n    const data = await response.json();\n    return data['hydra:member'].map(club => ({\n      name: club.name,\n      logo: club.logo,\n      cl_no: club.cl_no\n    }));\n  } catch (error) {\n    console.error('Error fetching clubs:', error);\n    return [];\n  }\n};\n\n// Fonction pour démarrer l'enregistrement\nexport const startRecording = async () => {\n  try {\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/start-recording', {\n      method: 'PUT'\n    });\n    if (!response.ok) {\n      throw new Error('Échec du démarrage de l\\'enregistrement');\n    }\n    return response;\n  } catch (error) {\n    console.error('Error starting recording:', error);\n    throw error;\n  }\n};\n\n// Fonction pour arrêter l'enregistrement\nexport const stopRecording = async () => {\n  try {\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/stop-recording', {\n      method: 'PUT'\n    });\n    if (!response.ok) {\n      throw new Error('Échec de l\\'arrêt de l\\'enregistrement');\n    }\n    return response;\n  } catch (error) {\n    console.error('Error stopping recording:', error);\n    throw error;\n  }\n};\n\n// Fonction pour récupérer l'URI de lecture et la durée de la vidéo\nexport const getPlaybackURI = async () => {\n  try {\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/search', {\n      method: 'GET'\n    });\n    if (!response.ok) {\n      throw new Error('Échec de la récupération de l\\'URI de lecture');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching playback URI:', error);\n    throw error;\n  }\n};\n\n// Fonction pour télécharger la vidéo\nexport const uploadVideo = async (filename, playbackURI, directory, duration) => {\n  try {\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        filename: directory + `${filename}.mp4`,\n        cameraRtspUrl: playbackURI,\n        directory: directory,\n        duration: duration\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Échec du téléchargement de la vidéo');\n    }\n    return response;\n  } catch (error) {\n    console.error('Error uploading video:', error);\n    throw error;\n  }\n};\nexport const fetchCompetitionsForClub = async cl_no => {\n  try {\n    const response = await fetch(`https://api-dofa.prd-aws.fff.fr/api/clubs/${cl_no}/equipes`);\n    const data = await response.json();\n\n    // Extraire les noms des compétitions dont le type est \"CH\"\n    const competitionNames = data['hydra:member'].flatMap(team => team.engagements.filter(engagement => engagement.competition.type === \"CH\").map(engagement => engagement.competition.name));\n    return competitionNames;\n  } catch (error) {\n    console.error('Error fetching competitions:', error);\n    return [];\n  }\n};\nexport const fetchMatchesForClub = async cl_no => {\n  try {\n    const response = await fetch(`https://api-dofa.prd-aws.fff.fr/api/clubs/${cl_no}/matchs`);\n    if (!response.ok) {\n      throw new Error('Échec de la récupération des matchs');\n    }\n    const data = await response.json();\n    return data['hydra:member'].filter(match => match.away && match.away.short_name && match.home && match.home.short_name).map(match => {\n      var homeCompetitionName = '';\n      var awayCompetitionName = '';\n      if (match.home && match.home.engagements) {\n        for (let i = 0; i < match.home.engagements.length; i++) {\n          homeCompetitionName = match.home.engagements[i].competition.type === 'CH' ? match.home.engagements[i].competition.name : homeCompetitionName;\n        }\n      }\n      if (match.away && match.away.engagements) {\n        for (let i = 0; i < match.away.engagements.length; i++) {\n          awayCompetitionName = match.away.engagements[i].competition.type === 'CH' ? match.away.engagements[i].competition.name : awayCompetitionName;\n        }\n      }\n      var competitionName = match.competition ? match.competition.name : '';\n      return {\n        id: match['@id'].split('/').pop(),\n        // Extraction so de l'ID depuis l'URL\n        date: match.date,\n        time: match.time,\n        home_score: match.home_score,\n        away_score: match.away_score,\n        season: match.competition.season,\n        // Ajout de la saison\n        homeTeam: match.home && match.home.short_name ? match.home.short_name : '',\n        // Vérifie l'existence\n        awayTeam: match.away && match.away.short_name ? match.away.short_name : '',\n        // Vérifie l'existence\n        homeLogo: match.home && match.home.club.logo ? match.home.club.logo : '',\n        // Vérifie l'existence\n        awayLogo: match.away && match.away.club.logo ? match.away.club.logo : '',\n        // Vérifie l'existence\n        competitionName,\n        // Ajout du nom de la compétition de l'équipe à domicile\n        homeCompetitionName,\n        // Ajout du nom de la compétition de l'équipe à domicile\n        awayCompetitionName // Ajout du nom de la compétition de l'équipe à l'extérieur so\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching matches:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["searchClubs","searchTerm","response","fetch","data","json","map","club","name","logo","cl_no","error","console","startRecording","method","ok","Error","stopRecording","getPlaybackURI","uploadVideo","filename","playbackURI","directory","duration","headers","body","JSON","stringify","cameraRtspUrl","fetchCompetitionsForClub","competitionNames","flatMap","team","engagements","filter","engagement","competition","type","fetchMatchesForClub","match","away","short_name","home","homeCompetitionName","awayCompetitionName","i","length","competitionName","id","split","pop","date","time","home_score","away_score","season","homeTeam","awayTeam","homeLogo","awayLogo"],"sources":["C:/perso/IA Sport Vision/Application/IASV/src/components/api.js"],"sourcesContent":["// api.js\r\n\r\n// Fonction pour rechercher des clubs\r\nexport const searchClubs = async (searchTerm) => {\r\n  try {\r\n    const response = await fetch(`https://api-dofa.prd-aws.fff.fr/api/clubs?clNom=${searchTerm}`);\r\n    const data = await response.json();\r\n    return data['hydra:member'].map(club => ({\r\n      name: club.name,\r\n      logo: club.logo,\r\n      cl_no: club.cl_no,\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching clubs:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n\r\n// Fonction pour démarrer l'enregistrement\r\nexport const startRecording = async () => {\r\n  try {\r\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/start-recording', {\r\n      method: 'PUT'\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Échec du démarrage de l\\'enregistrement');\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error starting recording:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fonction pour arrêter l'enregistrement\r\nexport const stopRecording = async () => {\r\n  try {\r\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/stop-recording', {\r\n      method: 'PUT'\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Échec de l\\'arrêt de l\\'enregistrement');\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error stopping recording:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fonction pour récupérer l'URI de lecture et la durée de la vidéo\r\nexport const getPlaybackURI = async () => {\r\n  try {\r\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/search', {\r\n      method: 'GET'\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Échec de la récupération de l\\'URI de lecture');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching playback URI:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fonction pour télécharger la vidéo\r\nexport const uploadVideo = async (filename, playbackURI, directory, duration) => {\r\n  try {\r\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/upload', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        filename: directory + `${filename}.mp4`,\r\n        cameraRtspUrl: playbackURI,\r\n        directory: directory,\r\n        duration: duration,\r\n      }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Échec du téléchargement de la vidéo');\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error uploading video:', error);\r\n    throw error;\r\n  }\r\n};\r\nexport const fetchCompetitionsForClub = async (cl_no) => {\r\n  try {\r\n    const response = await fetch(`https://api-dofa.prd-aws.fff.fr/api/clubs/${cl_no}/equipes`);\r\n    const data = await response.json();\r\n\r\n    // Extraire les noms des compétitions dont le type est \"CH\"\r\n    const competitionNames = data['hydra:member'].flatMap(team =>\r\n      team.engagements\r\n        .filter(engagement => engagement.competition.type === \"CH\")\r\n        .map(engagement => engagement.competition.name)\r\n    );\r\n\r\n    return competitionNames;\r\n  } catch (error) {\r\n    console.error('Error fetching competitions:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchMatchesForClub = async (cl_no) => {\r\n  try {\r\n    const response = await fetch(`https://api-dofa.prd-aws.fff.fr/api/clubs/${cl_no}/matchs`);\r\n    if (!response.ok) {\r\n      throw new Error('Échec de la récupération des matchs');\r\n    }\r\n    const data = await response.json();\r\n\r\n    return data['hydra:member']\r\n      .filter(match => \r\n        ( match.away && match.away.short_name && match.home && match.home.short_name)\r\n      )\r\n      .map(match => {\r\n        var homeCompetitionName = '';\r\n        var awayCompetitionName = '';\r\n         \r\n          if(match.home && match.home.engagements ){\r\n            for(let i = 0 ; i < match.home.engagements.length ; i++){\r\n              homeCompetitionName = match.home.engagements[i].competition.type === 'CH' ? match.home.engagements[i].competition.name : homeCompetitionName;\r\n            } \r\n          }\r\n          if(match.away && match.away.engagements){                  \r\n            for(let i = 0 ; i < match.away.engagements.length ;i++){\r\n              awayCompetitionName = match.away.engagements[i].competition.type === 'CH' ? match.away.engagements[i].competition.name : awayCompetitionName;\r\n            }\r\n          }\r\n          var competitionName = match.competition  ? match.competition.name :'';\r\n        return {\r\n          id: match['@id'].split('/').pop(), // Extraction so de l'ID depuis l'URL\r\n          date: match.date,\r\n          time: match.time,\r\n          home_score: match.home_score,\r\n          away_score: match.away_score,\r\n          season: match.competition.season, // Ajout de la saison\r\n          homeTeam: match.home && match.home.short_name ? match.home.short_name : '', // Vérifie l'existence\r\n          awayTeam: match.away && match.away.short_name ? match.away.short_name : '', // Vérifie l'existence\r\n          homeLogo: match.home && match.home.club.logo ? match.home.club.logo : '', // Vérifie l'existence\r\n          awayLogo: match.away && match.away.club.logo ? match.away.club.logo : '', // Vérifie l'existence\r\n          competitionName, // Ajout du nom de la compétition de l'équipe à domicile\r\n          homeCompetitionName, // Ajout du nom de la compétition de l'équipe à domicile\r\n          awayCompetitionName, // Ajout du nom de la compétition de l'équipe à l'extérieur so\r\n        };\r\n      });\r\n  } catch (error) {\r\n    console.error('Error fetching matches:', error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}