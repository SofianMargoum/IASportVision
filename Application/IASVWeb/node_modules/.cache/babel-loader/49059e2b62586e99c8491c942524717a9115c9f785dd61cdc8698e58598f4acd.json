{"ast":null,"code":"let selectedClub = null;\nlet selectedCompetition = null;\nlet recentClubs = []; // Ajout d'une variable pour stocker les clubs récents\n\nconst eventEmitter = new EventTarget();\n\n// Enregistrer le club sélectionné\nconst setSelectedClub = club => {\n  selectedClub = club;\n  localStorage.setItem('selectedClub', JSON.stringify(club));\n\n  // Mettre à jour la liste des clubs récents\n  recentClubs = [club, ...recentClubs.filter(c => c.cl_no !== club.cl_no)].slice(0, 3);\n  localStorage.setItem('recentClubs', JSON.stringify(recentClubs)); // Sauvegarder les 3 derniers clubs\n\n  eventEmitter.dispatchEvent(new CustomEvent('clubChanged', {\n    detail: club\n  }));\n};\n\n// Obtenir le club sélectionné\nconst getSelectedClub = () => {\n  if (!selectedClub) {\n    selectedClub = JSON.parse(localStorage.getItem('selectedClub'));\n  }\n  return selectedClub;\n};\n\n// Enregistrer la compétition sélectionnée\nconst setSelectedCompetition = competition => {\n  selectedCompetition = competition;\n  localStorage.setItem('selectedCompetition', competition);\n  eventEmitter.dispatchEvent(new CustomEvent('competitionChanged', {\n    detail: competition\n  }));\n};\n\n// Obtenir la compétition sélectionnée\nconst getSelectedCompetition = () => {\n  if (!selectedCompetition) {\n    selectedCompetition = localStorage.getItem('selectedCompetition');\n  }\n  return selectedCompetition;\n};\n\n// Obtenir les trois derniers clubs sélectionnés\nconst getRecentClubs = () => {\n  if (recentClubs.length === 0) {\n    recentClubs = JSON.parse(localStorage.getItem('recentClubs')) || [];\n  }\n  return recentClubs;\n};\n\n// S'abonner aux changements du club\nconst onClubChange = callback => {\n  eventEmitter.addEventListener('clubChanged', event => {\n    callback(event.detail);\n  });\n};\n\n// S'abonner aux changements de compétition\nconst onCompetitionChange = callback => {\n  eventEmitter.addEventListener('competitionChanged', event => {\n    callback(event.detail);\n  });\n};\nmodule.exports = {\n  setSelectedClub,\n  getSelectedClub,\n  setSelectedCompetition,\n  getSelectedCompetition,\n  getRecentClubs,\n  // Exporter la fonction pour obtenir les clubs récents\n  onClubChange,\n  onCompetitionChange\n};","map":{"version":3,"names":["selectedClub","selectedCompetition","recentClubs","eventEmitter","EventTarget","setSelectedClub","club","localStorage","setItem","JSON","stringify","filter","c","cl_no","slice","dispatchEvent","CustomEvent","detail","getSelectedClub","parse","getItem","setSelectedCompetition","competition","getSelectedCompetition","getRecentClubs","length","onClubChange","callback","addEventListener","event","onCompetitionChange","module","exports"],"sources":["C:/perso/IA Sport Vision/Application/IASV/src/config.js"],"sourcesContent":["let selectedClub = null;\r\nlet selectedCompetition = null;\r\nlet recentClubs = [];  // Ajout d'une variable pour stocker les clubs récents\r\n\r\nconst eventEmitter = new EventTarget();\r\n\r\n// Enregistrer le club sélectionné\r\nconst setSelectedClub = (club) => {\r\n  selectedClub = club;\r\n  localStorage.setItem('selectedClub', JSON.stringify(club));\r\n  \r\n  // Mettre à jour la liste des clubs récents\r\n  recentClubs = [club, ...recentClubs.filter(c => c.cl_no !== club.cl_no)].slice(0, 3);\r\n  localStorage.setItem('recentClubs', JSON.stringify(recentClubs));  // Sauvegarder les 3 derniers clubs\r\n\r\n  eventEmitter.dispatchEvent(new CustomEvent('clubChanged', { detail: club }));\r\n};\r\n\r\n// Obtenir le club sélectionné\r\nconst getSelectedClub = () => {\r\n  if (!selectedClub) {\r\n    selectedClub = JSON.parse(localStorage.getItem('selectedClub'));\r\n  }\r\n  return selectedClub;\r\n};\r\n\r\n// Enregistrer la compétition sélectionnée\r\nconst setSelectedCompetition = (competition) => {\r\n  selectedCompetition = competition;\r\n  localStorage.setItem('selectedCompetition', competition);\r\n  \r\n  eventEmitter.dispatchEvent(new CustomEvent('competitionChanged', { detail: competition }));\r\n};\r\n\r\n// Obtenir la compétition sélectionnée\r\nconst getSelectedCompetition = () => {\r\n  if (!selectedCompetition) {\r\n    selectedCompetition = localStorage.getItem('selectedCompetition');\r\n  }\r\n  return selectedCompetition;\r\n};\r\n\r\n// Obtenir les trois derniers clubs sélectionnés\r\nconst getRecentClubs = () => {\r\n  if (recentClubs.length === 0) {\r\n    recentClubs = JSON.parse(localStorage.getItem('recentClubs')) || [];\r\n  }\r\n  return recentClubs;\r\n};\r\n\r\n// S'abonner aux changements du club\r\nconst onClubChange = (callback) => {\r\n  eventEmitter.addEventListener('clubChanged', (event) => {\r\n    callback(event.detail);\r\n  });\r\n};\r\n\r\n// S'abonner aux changements de compétition\r\nconst onCompetitionChange = (callback) => {\r\n  eventEmitter.addEventListener('competitionChanged', (event) => {\r\n    callback(event.detail);\r\n  });\r\n};\r\n\r\nmodule.exports = {\r\n  setSelectedClub,\r\n  getSelectedClub,\r\n  setSelectedCompetition,\r\n  getSelectedCompetition,\r\n  getRecentClubs,  // Exporter la fonction pour obtenir les clubs récents\r\n  onClubChange,\r\n  onCompetitionChange,\r\n};\r\n"],"mappings":"AAAA,IAAIA,YAAY,GAAG,IAAI;AACvB,IAAIC,mBAAmB,GAAG,IAAI;AAC9B,IAAIC,WAAW,GAAG,EAAE,CAAC,CAAE;;AAEvB,MAAMC,YAAY,GAAG,IAAIC,WAAW,CAAC,CAAC;;AAEtC;AACA,MAAMC,eAAe,GAAIC,IAAI,IAAK;EAChCN,YAAY,GAAGM,IAAI;EACnBC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;;EAE1D;EACAJ,WAAW,GAAG,CAACI,IAAI,EAAE,GAAGJ,WAAW,CAACS,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKP,IAAI,CAACO,KAAK,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACpFP,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW,CAAC,CAAC,CAAC,CAAE;;EAEnEC,YAAY,CAACY,aAAa,CAAC,IAAIC,WAAW,CAAC,aAAa,EAAE;IAAEC,MAAM,EAAEX;EAAK,CAAC,CAAC,CAAC;AAC9E,CAAC;;AAED;AACA,MAAMY,eAAe,GAAGA,CAAA,KAAM;EAC5B,IAAI,CAAClB,YAAY,EAAE;IACjBA,YAAY,GAAGS,IAAI,CAACU,KAAK,CAACZ,YAAY,CAACa,OAAO,CAAC,cAAc,CAAC,CAAC;EACjE;EACA,OAAOpB,YAAY;AACrB,CAAC;;AAED;AACA,MAAMqB,sBAAsB,GAAIC,WAAW,IAAK;EAC9CrB,mBAAmB,GAAGqB,WAAW;EACjCf,YAAY,CAACC,OAAO,CAAC,qBAAqB,EAAEc,WAAW,CAAC;EAExDnB,YAAY,CAACY,aAAa,CAAC,IAAIC,WAAW,CAAC,oBAAoB,EAAE;IAAEC,MAAM,EAAEK;EAAY,CAAC,CAAC,CAAC;AAC5F,CAAC;;AAED;AACA,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EACnC,IAAI,CAACtB,mBAAmB,EAAE;IACxBA,mBAAmB,GAAGM,YAAY,CAACa,OAAO,CAAC,qBAAqB,CAAC;EACnE;EACA,OAAOnB,mBAAmB;AAC5B,CAAC;;AAED;AACA,MAAMuB,cAAc,GAAGA,CAAA,KAAM;EAC3B,IAAItB,WAAW,CAACuB,MAAM,KAAK,CAAC,EAAE;IAC5BvB,WAAW,GAAGO,IAAI,CAACU,KAAK,CAACZ,YAAY,CAACa,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE;EACrE;EACA,OAAOlB,WAAW;AACpB,CAAC;;AAED;AACA,MAAMwB,YAAY,GAAIC,QAAQ,IAAK;EACjCxB,YAAY,CAACyB,gBAAgB,CAAC,aAAa,EAAGC,KAAK,IAAK;IACtDF,QAAQ,CAACE,KAAK,CAACZ,MAAM,CAAC;EACxB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMa,mBAAmB,GAAIH,QAAQ,IAAK;EACxCxB,YAAY,CAACyB,gBAAgB,CAAC,oBAAoB,EAAGC,KAAK,IAAK;IAC7DF,QAAQ,CAACE,KAAK,CAACZ,MAAM,CAAC;EACxB,CAAC,CAAC;AACJ,CAAC;AAEDc,MAAM,CAACC,OAAO,GAAG;EACf3B,eAAe;EACfa,eAAe;EACfG,sBAAsB;EACtBE,sBAAsB;EACtBC,cAAc;EAAG;EACjBE,YAAY;EACZI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}