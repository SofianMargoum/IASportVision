{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback,useMemo}from'react';import'./css/SearchClub.css';import{debounce}from'lodash';import{searchClubs,fetchCompetitionsForClub}from'./../api';import config from'./../../config';// Importer le fichier config\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SearchClub=()=>{const[searchTerm,setSearchTerm]=useState('');const[clubs,setClubs]=useState([]);const[recentClubs,setRecentClubs]=useState([]);const[competitionNames,setCompetitionNames]=useState([]);const[selectedClubName,setSelectedClubName]=useState(null);// Initialiser à null pour éviter la sélection automatique\nconst scrollViewRef=useRef(null);const previousSearchTerm=useRef('');// Charger les clubs récents depuis config\nuseEffect(()=>{const savedRecentClubs=config.getRecentClubs();setRecentClubs(savedRecentClubs);// Si aucun terme de recherche n'est entré, afficher les clubs récents\nif(searchTerm.trim().length===0){setClubs(savedRecentClubs);}},[searchTerm]);// Supprimez l'appel à handleClubClick pour éviter la sélection automatique\nuseEffect(()=>{// Ne rien faire ici pour la sélection automatique\n},[]);useEffect(()=>{const savedCompetition=config.getSelectedCompetition();if(savedCompetition){handleCompetitionClick(savedCompetition);}},[]);// Fonction pour gérer la sélection d'une compétition\nconst handleCompetitionClick=useCallback(competitionName=>{config.setSelectedCompetition(competitionName);if(scrollViewRef.current){scrollViewRef.current.scrollTo({top:0,behavior:'smooth'});}},[]);const handleSearch=useCallback(debounce(async()=>{if(searchTerm.trim().length<3){setClubs(recentClubs);// Si le terme de recherche est trop court, on affiche les clubs récents\nreturn;}if(searchTerm===previousSearchTerm.current){return;}previousSearchTerm.current=searchTerm;const clubData=await searchClubs(searchTerm);if(clubData&&searchTerm===previousSearchTerm.current){setClubs(clubData.slice(0,30));}},300),// Débouncer avec 300ms pour une meilleure expérience utilisateur\n[searchTerm,recentClubs]);useEffect(()=>{handleSearch();return()=>handleSearch.cancel();},[searchTerm,handleSearch]);const handleClubClick=useCallback(async club=>{setSearchTerm('');setSelectedClubName(club.name);config.setSelectedClub(club);// Utilise config pour gérer le club sélectionné\nif(scrollViewRef.current){scrollViewRef.current.scrollTo({top:0,behavior:'smooth'});}let storedCompetitions=localStorage.getItem(\"competitions_\".concat(club.cl_no));if(storedCompetitions){storedCompetitions=JSON.parse(storedCompetitions);}else{storedCompetitions=await fetchCompetitionsForClub(club.cl_no);localStorage.setItem(\"competitions_\".concat(club.cl_no),JSON.stringify(storedCompetitions));}setCompetitionNames(storedCompetitions);// Sélectionner automatiquement la première compétition si disponible\nif(storedCompetitions.length>0){handleCompetitionClick(storedCompetitions[0]);// Sélectionner la première compétition\n}},[handleCompetitionClick]);const memoizedClubList=useMemo(()=>{return searchTerm.trim().length===0?recentClubs:clubs;},[clubs,recentClubs,searchTerm]);return/*#__PURE__*/_jsxs(\"div\",{ref:scrollViewRef,className:\"search-club-container\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"S\\xE9lectionner un club\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-container\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:searchTerm,onChange:e=>setSearchTerm(e.target.value),placeholder:\"Rechercher un club\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"suggestions\",children:\"suggestions\"}),/*#__PURE__*/_jsx(\"ul\",{children:memoizedClubList.map(club=>/*#__PURE__*/_jsxs(\"li\",{onClick:()=>handleClubClick(club),className:club.name===selectedClubName?'selected':'',children:[/*#__PURE__*/_jsx(\"img\",{src:club.logo,alt:\"\".concat(club.name,\" logo\")}),/*#__PURE__*/_jsx(\"span\",{children:club.name})]},club.cl_no))}),config.getSelectedClub()&&competitionNames.length>0&&/*#__PURE__*/ // Condition pour afficher la liste des compétitions seulement si des compétitions existent\n_jsxs(\"div\",{className:\"competition-list\",children:[/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(\"h4\",{children:\"S\\xE9lectionner une \\xE9quipe\"}),/*#__PURE__*/_jsx(\"div\",{className:\"suggestions\",children:\"suggestions\"}),/*#__PURE__*/_jsx(\"ul\",{children:competitionNames.map((name,index)=>/*#__PURE__*/_jsx(\"li\",{onClick:()=>handleCompetitionClick(name),className:name===config.getSelectedCompetition()?'selected':'',children:name},index))})]})]});};export default/*#__PURE__*/React.memo(SearchClub);","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useMemo","debounce","searchClubs","fetchCompetitionsForClub","config","jsx","_jsx","jsxs","_jsxs","SearchClub","searchTerm","setSearchTerm","clubs","setClubs","recentClubs","setRecentClubs","competitionNames","setCompetitionNames","selectedClubName","setSelectedClubName","scrollViewRef","previousSearchTerm","savedRecentClubs","getRecentClubs","trim","length","savedCompetition","getSelectedCompetition","handleCompetitionClick","competitionName","setSelectedCompetition","current","scrollTo","top","behavior","handleSearch","clubData","slice","cancel","handleClubClick","club","name","setSelectedClub","storedCompetitions","localStorage","getItem","concat","cl_no","JSON","parse","setItem","stringify","memoizedClubList","ref","className","children","type","value","onChange","e","target","placeholder","map","onClick","src","logo","alt","getSelectedClub","index","memo"],"sources":["C:/perso/IA Sport Vision/Application/IASV/src/components/Explore/SearchClub.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport './css/SearchClub.css';\r\nimport { debounce } from 'lodash';\r\nimport { searchClubs, fetchCompetitionsForClub } from './../api';\r\nimport config from './../../config';  // Importer le fichier config\r\n\r\nconst SearchClub = () => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [clubs, setClubs] = useState([]);\r\n  const [recentClubs, setRecentClubs] = useState([]);\r\n  const [competitionNames, setCompetitionNames] = useState([]);\r\n  const [selectedClubName, setSelectedClubName] = useState(null); // Initialiser à null pour éviter la sélection automatique\r\n\r\n  const scrollViewRef = useRef(null);\r\n  const previousSearchTerm = useRef('');\r\n\r\n  // Charger les clubs récents depuis config\r\n  useEffect(() => {\r\n    const savedRecentClubs = config.getRecentClubs();\r\n    setRecentClubs(savedRecentClubs);\r\n    \r\n    // Si aucun terme de recherche n'est entré, afficher les clubs récents\r\n    if (searchTerm.trim().length === 0) {\r\n      setClubs(savedRecentClubs);\r\n    }\r\n  }, [searchTerm]);\r\n\r\n  // Supprimez l'appel à handleClubClick pour éviter la sélection automatique\r\n  useEffect(() => {\r\n    // Ne rien faire ici pour la sélection automatique\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const savedCompetition = config.getSelectedCompetition();\r\n    if (savedCompetition) {\r\n      handleCompetitionClick(savedCompetition);\r\n    }\r\n  }, []);\r\n\r\n  // Fonction pour gérer la sélection d'une compétition\r\n  const handleCompetitionClick = useCallback((competitionName) => {\r\n    config.setSelectedCompetition(competitionName);\r\n\r\n    if (scrollViewRef.current) {\r\n      scrollViewRef.current.scrollTo({ top: 0, behavior: 'smooth' });\r\n    }\r\n  }, []);\r\n\r\n  const handleSearch = useCallback(\r\n    debounce(async () => {\r\n      if (searchTerm.trim().length < 3) {\r\n        setClubs(recentClubs);  // Si le terme de recherche est trop court, on affiche les clubs récents\r\n        return;\r\n      }\r\n\r\n      if (searchTerm === previousSearchTerm.current) {\r\n        return;\r\n      }\r\n\r\n      previousSearchTerm.current = searchTerm;\r\n      const clubData = await searchClubs(searchTerm);\r\n\r\n      if (clubData && searchTerm === previousSearchTerm.current) {\r\n        setClubs(clubData.slice(0, 30));\r\n      }\r\n    }, 300), // Débouncer avec 300ms pour une meilleure expérience utilisateur\r\n    [searchTerm, recentClubs]\r\n  );\r\n\r\n  useEffect(() => {\r\n    handleSearch();\r\n    return () => handleSearch.cancel();\r\n  }, [searchTerm, handleSearch]);\r\n\r\n  const handleClubClick = useCallback(async (club) => {\r\n    setSearchTerm('');\r\n    setSelectedClubName(club.name);\r\n    config.setSelectedClub(club);  // Utilise config pour gérer le club sélectionné\r\n\r\n    if (scrollViewRef.current) {\r\n      scrollViewRef.current.scrollTo({ top: 0, behavior: 'smooth' });\r\n    }\r\n\r\n    let storedCompetitions = localStorage.getItem(`competitions_${club.cl_no}`);\r\n    if (storedCompetitions) {\r\n      storedCompetitions = JSON.parse(storedCompetitions);\r\n    } else {\r\n      storedCompetitions = await fetchCompetitionsForClub(club.cl_no);\r\n      localStorage.setItem(`competitions_${club.cl_no}`, JSON.stringify(storedCompetitions));\r\n    }\r\n\r\n    setCompetitionNames(storedCompetitions);\r\n\r\n    // Sélectionner automatiquement la première compétition si disponible\r\n    if (storedCompetitions.length > 0) {\r\n      handleCompetitionClick(storedCompetitions[0]);  // Sélectionner la première compétition\r\n    }\r\n  }, [handleCompetitionClick]);\r\n\r\n  const memoizedClubList = useMemo(() => {\r\n    return searchTerm.trim().length === 0 ? recentClubs : clubs;\r\n  }, [clubs, recentClubs, searchTerm]);\r\n\r\n  return (\r\n    <div ref={scrollViewRef} className=\"search-club-container\">\r\n      <h4>Sélectionner un club</h4>\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          placeholder=\"Rechercher un club\"\r\n        />\r\n      </div>\r\n      <div className=\"suggestions\">suggestions</div>\r\n      <ul>\r\n        {memoizedClubList.map((club) => (\r\n          <li\r\n            key={club.cl_no}\r\n            onClick={() => handleClubClick(club)}\r\n            className={club.name === selectedClubName ? 'selected' : ''}\r\n          >\r\n            <img src={club.logo} alt={`${club.name} logo`} />\r\n            <span>{club.name}</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {config.getSelectedClub() && competitionNames.length > 0 && ( // Condition pour afficher la liste des compétitions seulement si des compétitions existent\r\n        <div className=\"competition-list\">\r\n          <hr />\r\n          <h4>Sélectionner une équipe</h4>\r\n          <div className=\"suggestions\">suggestions</div>\r\n          <ul>\r\n            {competitionNames.map((name, index) => (\r\n              <li \r\n                key={index} \r\n                onClick={() => handleCompetitionClick(name)}\r\n                className={name === config.getSelectedCompetition() ? 'selected' : ''}\r\n              >\r\n                {name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SearchClub);\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,CAAEC,WAAW,CAAEC,OAAO,KAAQ,OAAO,CAChF,MAAO,sBAAsB,CAC7B,OAASC,QAAQ,KAAQ,QAAQ,CACjC,OAASC,WAAW,CAAEC,wBAAwB,KAAQ,UAAU,CAChE,MAAO,CAAAC,MAAM,KAAM,gBAAgB,CAAG;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEtC,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvB,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACgB,KAAK,CAAEC,QAAQ,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACkB,WAAW,CAAEC,cAAc,CAAC,CAAGnB,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACoB,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGrB,QAAQ,CAAC,EAAE,CAAC,CAC5D,KAAM,CAACsB,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGvB,QAAQ,CAAC,IAAI,CAAC,CAAE;AAEhE,KAAM,CAAAwB,aAAa,CAAGtB,MAAM,CAAC,IAAI,CAAC,CAClC,KAAM,CAAAuB,kBAAkB,CAAGvB,MAAM,CAAC,EAAE,CAAC,CAErC;AACAD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAyB,gBAAgB,CAAGlB,MAAM,CAACmB,cAAc,CAAC,CAAC,CAChDR,cAAc,CAACO,gBAAgB,CAAC,CAEhC;AACA,GAAIZ,UAAU,CAACc,IAAI,CAAC,CAAC,CAACC,MAAM,GAAK,CAAC,CAAE,CAClCZ,QAAQ,CAACS,gBAAgB,CAAC,CAC5B,CACF,CAAC,CAAE,CAACZ,UAAU,CAAC,CAAC,CAEhB;AACAb,SAAS,CAAC,IAAM,CACd;AAAA,CACD,CAAE,EAAE,CAAC,CAENA,SAAS,CAAC,IAAM,CACd,KAAM,CAAA6B,gBAAgB,CAAGtB,MAAM,CAACuB,sBAAsB,CAAC,CAAC,CACxD,GAAID,gBAAgB,CAAE,CACpBE,sBAAsB,CAACF,gBAAgB,CAAC,CAC1C,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAE,sBAAsB,CAAG7B,WAAW,CAAE8B,eAAe,EAAK,CAC9DzB,MAAM,CAAC0B,sBAAsB,CAACD,eAAe,CAAC,CAE9C,GAAIT,aAAa,CAACW,OAAO,CAAE,CACzBX,aAAa,CAACW,OAAO,CAACC,QAAQ,CAAC,CAAEC,GAAG,CAAE,CAAC,CAAEC,QAAQ,CAAE,QAAS,CAAC,CAAC,CAChE,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,YAAY,CAAGpC,WAAW,CAC9BE,QAAQ,CAAC,SAAY,CACnB,GAAIS,UAAU,CAACc,IAAI,CAAC,CAAC,CAACC,MAAM,CAAG,CAAC,CAAE,CAChCZ,QAAQ,CAACC,WAAW,CAAC,CAAG;AACxB,OACF,CAEA,GAAIJ,UAAU,GAAKW,kBAAkB,CAACU,OAAO,CAAE,CAC7C,OACF,CAEAV,kBAAkB,CAACU,OAAO,CAAGrB,UAAU,CACvC,KAAM,CAAA0B,QAAQ,CAAG,KAAM,CAAAlC,WAAW,CAACQ,UAAU,CAAC,CAE9C,GAAI0B,QAAQ,EAAI1B,UAAU,GAAKW,kBAAkB,CAACU,OAAO,CAAE,CACzDlB,QAAQ,CAACuB,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CAAC,CACjC,CACF,CAAC,CAAE,GAAG,CAAC,CAAE;AACT,CAAC3B,UAAU,CAAEI,WAAW,CAC1B,CAAC,CAEDjB,SAAS,CAAC,IAAM,CACdsC,YAAY,CAAC,CAAC,CACd,MAAO,IAAMA,YAAY,CAACG,MAAM,CAAC,CAAC,CACpC,CAAC,CAAE,CAAC5B,UAAU,CAAEyB,YAAY,CAAC,CAAC,CAE9B,KAAM,CAAAI,eAAe,CAAGxC,WAAW,CAAC,KAAO,CAAAyC,IAAI,EAAK,CAClD7B,aAAa,CAAC,EAAE,CAAC,CACjBQ,mBAAmB,CAACqB,IAAI,CAACC,IAAI,CAAC,CAC9BrC,MAAM,CAACsC,eAAe,CAACF,IAAI,CAAC,CAAG;AAE/B,GAAIpB,aAAa,CAACW,OAAO,CAAE,CACzBX,aAAa,CAACW,OAAO,CAACC,QAAQ,CAAC,CAAEC,GAAG,CAAE,CAAC,CAAEC,QAAQ,CAAE,QAAS,CAAC,CAAC,CAChE,CAEA,GAAI,CAAAS,kBAAkB,CAAGC,YAAY,CAACC,OAAO,iBAAAC,MAAA,CAAiBN,IAAI,CAACO,KAAK,CAAE,CAAC,CAC3E,GAAIJ,kBAAkB,CAAE,CACtBA,kBAAkB,CAAGK,IAAI,CAACC,KAAK,CAACN,kBAAkB,CAAC,CACrD,CAAC,IAAM,CACLA,kBAAkB,CAAG,KAAM,CAAAxC,wBAAwB,CAACqC,IAAI,CAACO,KAAK,CAAC,CAC/DH,YAAY,CAACM,OAAO,iBAAAJ,MAAA,CAAiBN,IAAI,CAACO,KAAK,EAAIC,IAAI,CAACG,SAAS,CAACR,kBAAkB,CAAC,CAAC,CACxF,CAEA1B,mBAAmB,CAAC0B,kBAAkB,CAAC,CAEvC;AACA,GAAIA,kBAAkB,CAAClB,MAAM,CAAG,CAAC,CAAE,CACjCG,sBAAsB,CAACe,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAG;AAClD,CACF,CAAC,CAAE,CAACf,sBAAsB,CAAC,CAAC,CAE5B,KAAM,CAAAwB,gBAAgB,CAAGpD,OAAO,CAAC,IAAM,CACrC,MAAO,CAAAU,UAAU,CAACc,IAAI,CAAC,CAAC,CAACC,MAAM,GAAK,CAAC,CAAGX,WAAW,CAAGF,KAAK,CAC7D,CAAC,CAAE,CAACA,KAAK,CAAEE,WAAW,CAAEJ,UAAU,CAAC,CAAC,CAEpC,mBACEF,KAAA,QAAK6C,GAAG,CAAEjC,aAAc,CAACkC,SAAS,CAAC,uBAAuB,CAAAC,QAAA,eACxDjD,IAAA,OAAAiD,QAAA,CAAI,yBAAoB,CAAI,CAAC,cAC7BjD,IAAA,QAAKgD,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9BjD,IAAA,UACEkD,IAAI,CAAC,MAAM,CACXC,KAAK,CAAE/C,UAAW,CAClBgD,QAAQ,CAAGC,CAAC,EAAKhD,aAAa,CAACgD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC/CI,WAAW,CAAC,oBAAoB,CACjC,CAAC,CACC,CAAC,cACNvD,IAAA,QAAKgD,SAAS,CAAC,aAAa,CAAAC,QAAA,CAAC,aAAW,CAAK,CAAC,cAC9CjD,IAAA,OAAAiD,QAAA,CACGH,gBAAgB,CAACU,GAAG,CAAEtB,IAAI,eACzBhC,KAAA,OAEEuD,OAAO,CAAEA,CAAA,GAAMxB,eAAe,CAACC,IAAI,CAAE,CACrCc,SAAS,CAAEd,IAAI,CAACC,IAAI,GAAKvB,gBAAgB,CAAG,UAAU,CAAG,EAAG,CAAAqC,QAAA,eAE5DjD,IAAA,QAAK0D,GAAG,CAAExB,IAAI,CAACyB,IAAK,CAACC,GAAG,IAAApB,MAAA,CAAKN,IAAI,CAACC,IAAI,SAAQ,CAAE,CAAC,cACjDnC,IAAA,SAAAiD,QAAA,CAAOf,IAAI,CAACC,IAAI,CAAO,CAAC,GALnBD,IAAI,CAACO,KAMR,CACL,CAAC,CACA,CAAC,CAEJ3C,MAAM,CAAC+D,eAAe,CAAC,CAAC,EAAInD,gBAAgB,CAACS,MAAM,CAAG,CAAC,gBAAM;AAC5DjB,KAAA,QAAK8C,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC/BjD,IAAA,QAAK,CAAC,cACNA,IAAA,OAAAiD,QAAA,CAAI,+BAAuB,CAAI,CAAC,cAChCjD,IAAA,QAAKgD,SAAS,CAAC,aAAa,CAAAC,QAAA,CAAC,aAAW,CAAK,CAAC,cAC9CjD,IAAA,OAAAiD,QAAA,CACGvC,gBAAgB,CAAC8C,GAAG,CAAC,CAACrB,IAAI,CAAE2B,KAAK,gBAChC9D,IAAA,OAEEyD,OAAO,CAAEA,CAAA,GAAMnC,sBAAsB,CAACa,IAAI,CAAE,CAC5Ca,SAAS,CAAEb,IAAI,GAAKrC,MAAM,CAACuB,sBAAsB,CAAC,CAAC,CAAG,UAAU,CAAG,EAAG,CAAA4B,QAAA,CAErEd,IAAI,EAJA2B,KAKH,CACL,CAAC,CACA,CAAC,EACF,CACN,EACE,CAAC,CAEV,CAAC,CAED,2BAAezE,KAAK,CAAC0E,IAAI,CAAC5D,UAAU,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}