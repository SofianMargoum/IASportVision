{"ast":null,"code":"// api.js\n\n// Fonction pour rechercher des clubs\nexport const searchClubs = async searchTerm => {\n  try {\n    const response = await fetch(`https://api-dofa.prd-aws.fff.fr/api/clubs?clNom=${searchTerm}`);\n    const data = await response.json();\n    return data['hydra:member'].map(club => ({\n      name: club.name,\n      logo: club.logo,\n      logo: club.logo\n    }));\n  } catch (error) {\n    console.error('Error fetching clubs:', error);\n    return [];\n  }\n};\n// Fonction pour rechercher des equipes\nexport const searchTeams = async searchTerm => {\n  try {\n    const response = await fetch(`https://api-dofa.prd-aws.fff.fr/api/clubs?clNom=${searchTerm}`);\n    const data = await response.json();\n    return data['hydra:member'].map(club => ({\n      name: club.name,\n      logo: club.logo\n    }));\n  } catch (error) {\n    console.error('Error fetching clubs:', error);\n    return [];\n  }\n};\n\n// Fonction pour démarrer l'enregistrement\nexport const startRecording = async () => {\n  try {\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/start-recording', {\n      method: 'PUT'\n    });\n    if (!response.ok) {\n      throw new Error('Échec du démarrage de l\\'enregistrement');\n    }\n    return response;\n  } catch (error) {\n    console.error('Error starting recording:', error);\n    throw error;\n  }\n};\n\n// Fonction pour arrêter l'enregistrement\nexport const stopRecording = async () => {\n  try {\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/stop-recording', {\n      method: 'PUT'\n    });\n    if (!response.ok) {\n      throw new Error('Échec de l\\'arrêt de l\\'enregistrement');\n    }\n    return response;\n  } catch (error) {\n    console.error('Error stopping recording:', error);\n    throw error;\n  }\n};\n\n// Fonction pour récupérer l'URI de lecture et la durée de la vidéo\nexport const getPlaybackURI = async () => {\n  try {\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/search', {\n      method: 'GET'\n    });\n    if (!response.ok) {\n      throw new Error('Échec de la récupération de l\\'URI de lecture');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching playback URI:', error);\n    throw error;\n  }\n};\n\n// Fonction pour télécharger la vidéo\nexport const uploadVideo = async (filename, playbackURI, directory, duration) => {\n  try {\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/upload', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        filename: directory + `${filename}.mp4`,\n        cameraRtspUrl: playbackURI,\n        directory: directory,\n        duration: duration\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Échec du téléchargement de la vidéo');\n    }\n    return response;\n  } catch (error) {\n    console.error('Error uploading video:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["searchClubs","searchTerm","response","fetch","data","json","map","club","name","logo","error","console","searchTeams","startRecording","method","ok","Error","stopRecording","getPlaybackURI","uploadVideo","filename","playbackURI","directory","duration","headers","body","JSON","stringify","cameraRtspUrl"],"sources":["C:/perso/IA Sport Vision/Application/IASV/src/components/api.js"],"sourcesContent":["// api.js\r\n\r\n// Fonction pour rechercher des clubs\r\nexport const searchClubs = async (searchTerm) => {\r\n  try {\r\n    const response = await fetch(`https://api-dofa.prd-aws.fff.fr/api/clubs?clNom=${searchTerm}`);\r\n    const data = await response.json();\r\n    return data['hydra:member'].map(club => ({\r\n      name: club.name,\r\n      logo: club.logo,\r\n      logo: club.logo,\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching clubs:', error);\r\n    return [];\r\n  }\r\n};\r\n// Fonction pour rechercher des equipes\r\nexport const searchTeams = async (searchTerm) => {\r\n  try {\r\n    const response = await fetch(`https://api-dofa.prd-aws.fff.fr/api/clubs?clNom=${searchTerm}`);\r\n    const data = await response.json();\r\n    return data['hydra:member'].map(club => ({\r\n      name: club.name,\r\n      logo: club.logo,\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching clubs:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Fonction pour démarrer l'enregistrement\r\nexport const startRecording = async () => {\r\n  try {\r\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/start-recording', {\r\n      method: 'PUT'\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Échec du démarrage de l\\'enregistrement');\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error starting recording:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fonction pour arrêter l'enregistrement\r\nexport const stopRecording = async () => {\r\n  try {\r\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/stop-recording', {\r\n      method: 'PUT'\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Échec de l\\'arrêt de l\\'enregistrement');\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error stopping recording:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fonction pour récupérer l'URI de lecture et la durée de la vidéo\r\nexport const getPlaybackURI = async () => {\r\n  try {\r\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/search', {\r\n      method: 'GET'\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Échec de la récupération de l\\'URI de lecture');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching playback URI:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fonction pour télécharger la vidéo\r\nexport const uploadVideo = async (filename, playbackURI, directory, duration) => {\r\n  try {\r\n    const response = await fetch('https://ia-sport.oa.r.appspot.com/api/upload', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        filename: directory + `${filename}.mp4`,\r\n        cameraRtspUrl: playbackURI,\r\n        directory: directory,\r\n        duration: duration,\r\n      }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Échec du téléchargement de la vidéo');\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error uploading video:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}