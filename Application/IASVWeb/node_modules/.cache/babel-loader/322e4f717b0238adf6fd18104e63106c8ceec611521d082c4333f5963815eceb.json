{"ast":null,"code":"import React,{useEffect,useState,useCallback,useMemo,Suspense}from'react';import'./css/Resultat.css';// Assurez-vous d'importer ce fichier CSS\nimport config from'../config';// Import du fichier config.js\n// Lazy loading des composants pour optimiser le temps de chargement initial\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MatchsContent=/*#__PURE__*/React.lazy(()=>import('./Resultat/MatchsContent'));const ClassementsContent=/*#__PURE__*/React.lazy(()=>import('./Resultat/ClassementsContent'));const StatsContent=/*#__PURE__*/React.lazy(()=>import('./Resultat/StatsContent'));function Resultat(){// Utiliser des fonctions dans useState pour éviter les recalculs à chaque rendu\nconst[activeTab,setActiveTab]=useState('MATCHS');const[selectedClub,setSelectedClub]=useState(()=>config.getSelectedClub());const[selectedCompetition,setSelectedCompetition]=useState(()=>config.getSelectedCompetition());useEffect(()=>{console.log('Resultat component mounted or dependencies changed');},[]);// Utilisation de useCallback pour éviter que setActiveTab ne change à chaque rendu\nconst handleTabClick=useCallback(tab=>{setActiveTab(tab);},[]);// Utilisation de useMemo pour mémoriser le contenu à afficher en fonction de l'onglet actif\nconst renderContent=useMemo(()=>{switch(activeTab){case'MATCHS':return/*#__PURE__*/_jsx(MatchsContent,{club:selectedClub,competition:selectedCompetition});case'CLASSEMENTS':return/*#__PURE__*/_jsx(ClassementsContent,{club:selectedClub,competition:selectedCompetition});case'STATS':return/*#__PURE__*/_jsx(StatsContent,{club:selectedClub,competition:selectedCompetition});default:return null;}},[activeTab,selectedClub,selectedCompetition]);return/*#__PURE__*/_jsxs(\"div\",{className:\"resultat-container\",children:[/*#__PURE__*/_jsxs(\"nav\",{children:[/*#__PURE__*/_jsx(\"button\",{className:activeTab==='MATCHS'?'active':'',onClick:()=>handleTabClick('MATCHS'),children:\"MATCHS\"}),/*#__PURE__*/_jsx(\"button\",{className:activeTab==='CLASSEMENTS'?'active':'',onClick:()=>handleTabClick('CLASSEMENTS'),children:\"CLASSEMENTS\"}),/*#__PURE__*/_jsx(\"button\",{className:activeTab==='STATS'?'active':'',onClick:()=>handleTabClick('STATS'),children:\"STATS\"})]}),/*#__PURE__*/_jsx(Suspense,{fallback:/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"}),children:renderContent})]});}export default Resultat;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useMemo","Suspense","config","jsx","_jsx","jsxs","_jsxs","MatchsContent","lazy","ClassementsContent","StatsContent","Resultat","activeTab","setActiveTab","selectedClub","setSelectedClub","getSelectedClub","selectedCompetition","setSelectedCompetition","getSelectedCompetition","console","log","handleTabClick","tab","renderContent","club","competition","className","children","onClick","fallback"],"sources":["C:/perso/IA Sport Vision/Application/IASV/src/components/Resultat.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useMemo, Suspense } from 'react';\r\nimport './css/Resultat.css';  // Assurez-vous d'importer ce fichier CSS\r\nimport config from '../config';  // Import du fichier config.js\r\n\r\n// Lazy loading des composants pour optimiser le temps de chargement initial\r\nconst MatchsContent = React.lazy(() => import('./Resultat/MatchsContent'));\r\nconst ClassementsContent = React.lazy(() => import('./Resultat/ClassementsContent'));\r\nconst StatsContent = React.lazy(() => import('./Resultat/StatsContent'));\r\n\r\nfunction Resultat() {\r\n  // Utiliser des fonctions dans useState pour éviter les recalculs à chaque rendu\r\n  const [activeTab, setActiveTab] = useState('MATCHS');\r\n  const [selectedClub, setSelectedClub] = useState(() => config.getSelectedClub());\r\n  const [selectedCompetition, setSelectedCompetition] = useState(() => config.getSelectedCompetition());\r\n\r\n  useEffect(() => {\r\n    console.log('Resultat component mounted or dependencies changed');\r\n  }, []);\r\n\r\n  // Utilisation de useCallback pour éviter que setActiveTab ne change à chaque rendu\r\n  const handleTabClick = useCallback((tab) => {\r\n    setActiveTab(tab);\r\n  }, []);\r\n\r\n  // Utilisation de useMemo pour mémoriser le contenu à afficher en fonction de l'onglet actif\r\n  const renderContent = useMemo(() => {\r\n    switch (activeTab) {\r\n      case 'MATCHS':\r\n        return <MatchsContent club={selectedClub} competition={selectedCompetition} />;\r\n      case 'CLASSEMENTS':\r\n        return <ClassementsContent club={selectedClub} competition={selectedCompetition} />;\r\n      case 'STATS':\r\n        return <StatsContent club={selectedClub} competition={selectedCompetition} />;\r\n      default:\r\n        return null;\r\n    }\r\n  }, [activeTab, selectedClub, selectedCompetition]);\r\n\r\n  return (\r\n    <div className=\"resultat-container\">    \r\n      {/* Menu avec onglets */}\r\n      <nav>\r\n        <button\r\n          className={activeTab === 'MATCHS' ? 'active' : ''}\r\n          onClick={() => handleTabClick('MATCHS')}\r\n        >\r\n          MATCHS\r\n        </button>\r\n        <button\r\n          className={activeTab === 'CLASSEMENTS' ? 'active' : ''}\r\n          onClick={() => handleTabClick('CLASSEMENTS')}\r\n        >\r\n          CLASSEMENTS\r\n        </button>\r\n        <button\r\n          className={activeTab === 'STATS' ? 'active' : ''}\r\n          onClick={() => handleTabClick('STATS')}\r\n        >\r\n          STATS\r\n        </button>\r\n      </nav>\r\n\r\n      {/* Affichage du contenu avec Suspense pour le lazy loading */}\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        {renderContent}\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Resultat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}