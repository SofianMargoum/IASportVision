{"version":3,"file":"static/js/626.320aa75e.chunk.js","mappings":"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","sources":["components/Resultat/MatchsContent.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { fetchMatchesForClub } from './../api'; // Assurez-vous que le chemin d'importation est correct\r\nimport './css/MatchsContent.css'; // Importation du CSS\r\nimport config from '../../config';  // Import du fichier config.js\r\n\r\nfunction MatchsContent() {\r\n  const [matches, setMatches] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const matchRefs = useRef([]);\r\n  const scrollContainerRef = useRef(null); // Ajouter une ref pour le conteneur\r\n  const [selectedClub, setSelectedClub] = useState(config.getSelectedClub());  // Initialiser avec le club sélectionné\r\n  const [selectedCompetition, setSelectedCompetition] = useState(config.getSelectedCompetition());  // Initialiser avec la compétition sélectionnée\r\n\r\n  useEffect(() => {\r\n    // Fonction pour charger les matchs\r\n    const loadMatches = async () => {\r\n      setLoading(true);\r\n      try {\r\n        if (selectedClub && selectedClub.cl_no) {  // Vérifier si le club est bien défini\r\n          const data = await fetchMatchesForClub(selectedClub.cl_no);\r\n          setMatches(data);\r\n        }\r\n      } catch (error) {\r\n        setError('Erreur lors de la récupération des matchs.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Charger les matchs au démarrage et lorsque le club change\r\n    if (selectedClub && selectedClub.cl_no) {\r\n      loadMatches();\r\n    }\r\n\r\n    // Écouter les changements de club et de compétition\r\n    const handleClubChange = (club) => {\r\n      setSelectedClub(club);\r\n      setMatches([]);  // Réinitialiser les matchs lors du changement de club\r\n    };\r\n\r\n    const handleCompetitionChange = (competition) => {\r\n      setSelectedCompetition(competition);\r\n    };\r\n\r\n    // Ajouter les gestionnaires d'événements\r\n    config.onClubChange(handleClubChange);\r\n    config.onCompetitionChange(handleCompetitionChange);\r\n\r\n    // Nettoyer les gestionnaires d'événements lors du démontage du composant\r\n    return () => {\r\n      config.onClubChange(() => {});\r\n      config.onCompetitionChange(() => {});\r\n    };\r\n  }, [selectedClub]);\r\n\r\n  const filteredMatches = useMemo(() => {\r\n    return matches.filter(\r\n      match =>\r\n        (match.homeTeam === selectedClub.name && match.homeCompetitionName === selectedCompetition) ||\r\n        (match.awayTeam === selectedClub.name && match.awayCompetitionName === selectedCompetition)\r\n    );\r\n  }, [matches, selectedClub.name, selectedCompetition]);\r\n\r\n  useEffect(() => {\r\n    if (filteredMatches.length > 0) {\r\n      const today = new Date();\r\n      console.log('Today\\'s date:', today);\r\n      const lastMatchIndex = filteredMatches.reduce((lastIndex, match, index) => {\r\n        const matchDate = new Date(match.date);\r\n        console.log(`Match ${index}: `, matchDate);\r\n        return matchDate < today && (lastIndex === -1 || matchDate > new Date(filteredMatches[lastIndex].date))\r\n          ? index\r\n          : lastIndex;\r\n      }, -1);\r\n  \r\n      console.log('Last match index:', lastMatchIndex);\r\n  \r\n      if (lastMatchIndex >= 0 && matchRefs.current[lastMatchIndex]) {\r\n        scrollContainerRef.current.scrollTo({\r\n          top: matchRefs.current[lastMatchIndex].offsetTop - 93, // Ajustez la valeur en fonction des marges ou paddings\r\n          behavior: 'smooth',\r\n        });\r\n        \r\n      }\r\n    }\r\n  }, [filteredMatches]);\r\n  \r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Chargement des matchs...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">Erreur : {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"tab-content-match\">\r\n      {filteredMatches.length === 0 ? (\r\n        <p className=\"error\">Aucun match trouvé pour {selectedClub.name}.</p>\r\n      ) : (\r\n        <div className=\"scroll-container\" ref={scrollContainerRef}> {/* Ajout de la classe scroll-container */}\r\n          {filteredMatches.map((match, index) => (\r\n            <div\r\n              key={match.id}\r\n              className=\"match-item\"\r\n              ref={el => matchRefs.current[index] = el}\r\n            >\r\n              <div className=\"match-date\">\r\n                {new Date(match.date).toLocaleDateString()} - {match.time} - {match.competitionName}\r\n              </div>\r\n              <div className=\"match-content\">\r\n                <div className=\"match-details-team\">\r\n                  <img src={match.homeLogo} alt={`${match.homeTeam} logo`} className=\"team-logo\" />\r\n                  {match.homeTeam}\r\n                </div>\r\n                <div className=\"match-score\">\r\n                  {match.home_score}\r\n                </div>\r\n                <div className=\"match-details-team\">\r\n                  <img src={match.awayLogo} alt={`${match.awayTeam} logo`} className=\"team-logo\" />\r\n                  {match.awayTeam}\r\n                </div>\r\n                <div className=\"match-score\">\r\n                  {match.away_score}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MatchsContent;\r\n"],"names":["matches","setMatches","useState","loading","setLoading","error","setError","matchRefs","useRef","scrollContainerRef","selectedClub","setSelectedClub","config","selectedCompetition","setSelectedCompetition","useEffect","cl_no","async","data","fetchMatchesForClub","loadMatches","club","competition","filteredMatches","useMemo","filter","match","homeTeam","name","homeCompetitionName","awayTeam","awayCompetitionName","length","today","Date","console","log","lastMatchIndex","reduce","lastIndex","index","matchDate","date","concat","current","scrollTo","top","offsetTop","behavior","_jsx","className","children","_jsxs","ref","map","el","toLocaleDateString","time","competitionName","src","homeLogo","alt","home_score","awayLogo","away_score","id"],"sourceRoot":""}