{"version":3,"file":"static/js/716.6c3eeff6.chunk.js","mappings":"gLA0JA,QArJA,WACE,MAAOA,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,MAE7BK,EAAsBC,IAAAA,yBA8F5B,OA5FAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAeF,IAAAA,kBAErB,GAAIE,EAAc,CAChB,MAAMC,EAAYC,UAChB,IAEE,MAAMC,QAAgBC,EAAAA,EAAAA,IAAoBJ,EAAaK,OAGvD,IAAIC,EAAa,KACjB,IAAK,MAAMC,KAASJ,EAClB,GAAII,EAAMC,kBAAoBX,EAAqB,CACjDS,EAAaC,EACb,KACF,CAGF,IAAID,EAcF,MAAM,IAAIG,MAAM,oEAdF,CAEd,MAAMC,EAAgBJ,EAAWK,kBAC3BC,EAAUN,EAAWO,YACrBC,EAAUR,EAAWS,YAGrBC,QAAwBC,EAAAA,EAAAA,IAC5BP,EACAE,EACAE,GAEFvB,EAAeyB,EACjB,CAIAtB,GAAW,EACb,CAAE,MAAOC,GACPC,EAASD,GACTD,GAAW,EACb,GAGFO,GACF,MACEL,EAAS,IAAIa,MAAM,kCACnBf,GAAW,GAIbI,IAAAA,cAAqBoB,IAEnBxB,GAAW,GACXE,EAAS,MACTL,EAAe,IAGMW,WACnB,IACE,MAAMC,QAAgBC,EAAAA,EAAAA,IAAoBc,EAAKb,OAC/C,IAAIC,EAAa,KACjB,IAAK,MAAMC,KAASJ,EAClB,GAAII,EAAMC,kBAAoBX,EAAqB,CACjDS,EAAaC,EACb,KACF,CAGF,IAAID,EAYF,MAAM,IAAIG,MAAM,oEAZF,CACd,MAAMC,EAAgBJ,EAAWK,kBAC3BC,EAAUN,EAAWO,YACrBC,EAAUR,EAAWS,YAErBC,QAAwBC,EAAAA,EAAAA,IAC5BP,EACAE,EACAE,GAEFvB,EAAeyB,EACjB,CAGAtB,GAAW,EACb,CAAE,MAAOC,GACPC,EAASD,GACTD,GAAW,EACb,GAGFyB,EAAc,GACd,GACD,IAEC1B,GACK2B,EAAAA,EAAAA,KAAA,OAAAC,SAAK,kCAGV1B,GACK2B,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,+CAA6C1B,EAAM4B,YAI/DH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,qBAAoBH,SAChC/B,EAAYmC,OAAS,GACpBH,EAAAA,EAAAA,MAAA,SAAOE,UAAU,mBAAkBH,SAAA,EACjCD,EAAAA,EAAAA,KAAA,SAAAC,UACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAI,SAAS,KACbD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,UACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,SACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,QACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,OACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,OACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,OACJD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,OAAO,KACXD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,OAAO,KACXD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,OAAO,UAGfD,EAAAA,EAAAA,KAAA,SAAAC,SACG/B,EAAYoC,KAAI,CAACC,EAASC,KACzBN,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAA2B,KACzBD,EAAAA,EAAAA,KAAA,MAAAC,SAAKM,EAAQE,OAAU,KACvBT,EAAAA,EAAAA,KAAA,MAAII,UAAU,cAAaH,SAAEM,EAAQG,YACrCV,EAAAA,EAAAA,KAAA,MAAII,UAAU,gBAAeH,SAAEM,EAAQI,UACvCX,EAAAA,EAAAA,KAAA,MAAAC,SAAKM,EAAQK,cACbZ,EAAAA,EAAAA,KAAA,MAAAC,SAAKM,EAAQM,YACbb,EAAAA,EAAAA,KAAA,MAAAC,SAAKM,EAAQO,aACbd,EAAAA,EAAAA,KAAA,MAAAC,SAAKM,EAAQQ,aACbf,EAAAA,EAAAA,KAAA,MAAAC,SAAKM,EAAQS,WAAc,KAC3BhB,EAAAA,EAAAA,KAAA,MAAAC,SAAKM,EAAQU,eAAkB,KAC/BjB,EAAAA,EAAAA,KAAA,MAAAC,SAAKM,EAAQW,iBAAoB,MAV1BX,EAAQG,kBAgBvBV,EAAAA,EAAAA,KAAA,KAAGI,UAAU,QAAOH,SAAC,iDAI7B,C","sources":["components/Resultat/ClassementsContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchMatchesForClub, fetchClassementJournees } from './../api'; // Import des fonctions API\r\nimport config from './../../config'; // Import de votre fichier de configuration\r\nimport './css/ClassementsContent.css';\r\n\r\nfunction ClassementsContent() {\r\n  const [classements, setClassements] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const selectedCompetition = config.getSelectedCompetition();\r\n\r\n  useEffect(() => {\r\n    const selectedClub = config.getSelectedClub();\r\n\r\n    if (selectedClub) {\r\n      const fetchData = async () => {\r\n        try {\r\n          // Étape 1 : Récupérer les matches du club à l'aide de l'API fetchMatchesForClub\r\n          const matches = await fetchMatchesForClub(selectedClub.cl_no);\r\n\r\n          // Étape 2 : Trouver le premier match correspondant à la compétition sélectionnée\r\n          let foundMatch = null;\r\n          for (const match of matches) {\r\n            if (match.competitionName === selectedCompetition) {\r\n              foundMatch = match; // On stocke le match correspondant\r\n              break; // Sortir de la boucle dès qu'on trouve une correspondance\r\n            }\r\n          }\r\n\r\n          if (foundMatch) {\r\n            // Extraire les informations competitionId, phaseId, pouleId du match trouvé\r\n            const competitionId = foundMatch.competitionNumber;\r\n            const phaseId = foundMatch.phaseNumber;\r\n            const pouleId = foundMatch.pouleNumber;\r\n\r\n            // Récupérer le classement\r\n            const classementsData = await fetchClassementJournees(\r\n              competitionId,\r\n              phaseId,\r\n              pouleId\r\n            );\r\n            setClassements(classementsData);\r\n          } else {\r\n            throw new Error('Aucun match trouvé pour la compétition sélectionnée.');\r\n          }\r\n\r\n          setLoading(false);\r\n        } catch (error) {\r\n          setError(error);\r\n          setLoading(false);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    } else {\r\n      setError(new Error('Aucun club sélectionné.'));\r\n      setLoading(false);\r\n    }\r\n\r\n    // Écouter les changements du club sélectionné\r\n    config.onClubChange((club) => {\r\n      // Lorsque le club change, relancer la récupération des données\r\n      setLoading(true);\r\n      setError(null);\r\n      setClassements([]);\r\n      \r\n      // Relancer la récupération des données pour le nouveau club\r\n      const fetchNewData = async () => {\r\n        try {\r\n          const matches = await fetchMatchesForClub(club.cl_no);\r\n          let foundMatch = null;\r\n          for (const match of matches) {\r\n            if (match.competitionName === selectedCompetition) {\r\n              foundMatch = match;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (foundMatch) {\r\n            const competitionId = foundMatch.competitionNumber;\r\n            const phaseId = foundMatch.phaseNumber;\r\n            const pouleId = foundMatch.pouleNumber;\r\n\r\n            const classementsData = await fetchClassementJournees(\r\n              competitionId,\r\n              phaseId,\r\n              pouleId\r\n            );\r\n            setClassements(classementsData);\r\n          } else {\r\n            throw new Error('Aucun match trouvé pour la compétition sélectionnée.');\r\n          }\r\n          setLoading(false);\r\n        } catch (error) {\r\n          setError(error);\r\n          setLoading(false);\r\n        }\r\n      };\r\n      \r\n      fetchNewData();\r\n    });\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Chargement des classements...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Erreur lors du chargement des classements : {error.message}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"classement-content\">\r\n      {classements.length > 0 ? (\r\n        <table className=\"classement-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Rang</th> {/* Classement / Rang */}\r\n              <th>Club</th>\r\n              <th>Pts</th>\r\n              <th>MJ</th>\r\n              <th>G</th>\r\n              <th>N</th>\r\n              <th>P</th>\r\n              <th>BP</th> {/* Buts pour */}\r\n              <th>BC</th> {/* Buts contre */}\r\n              <th>DB</th> {/* Différence de buts */}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {classements.map((journee, index) => (\r\n              <tr key={journee.teamName}> {/* Utilisation de teamName comme key pour éviter index */}\r\n                <td>{journee.rank}</td> {/* Classement/Rang */}\r\n                <td className=\"team-column\">{journee.teamName}</td>\r\n                <td className=\"points-column\">{journee.points}</td>\r\n                <td>{journee.totalGames}</td>\r\n                <td>{journee.wonGames}</td>\r\n                <td>{journee.drawGames}</td>\r\n                <td>{journee.lostGames}</td>\r\n                <td>{journee.goalsFor}</td> {/* Buts pour */}\r\n                <td>{journee.goalsAgainst}</td> {/* Buts contre */}\r\n                <td>{journee.goalDifference}</td> {/* Différence de buts */}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        <p className=\"error\">Aucun classement disponible pour le moment.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClassementsContent;\r\n"],"names":["classements","setClassements","useState","loading","setLoading","error","setError","selectedCompetition","config","useEffect","selectedClub","fetchData","async","matches","fetchMatchesForClub","cl_no","foundMatch","match","competitionName","Error","competitionId","competitionNumber","phaseId","phaseNumber","pouleId","pouleNumber","classementsData","fetchClassementJournees","club","fetchNewData","_jsx","children","_jsxs","message","className","length","map","journee","index","rank","teamName","points","totalGames","wonGames","drawGames","lostGames","goalsFor","goalsAgainst","goalDifference"],"sourceRoot":""}