{"ast":null,"code":"const fs = require('fs');\nconst cheerio = require('cheerio');\nfunction extractDataFromHTML(html) {\n  const $ = cheerio.load(html);\n\n  // Extraction des données des clubs\n  const clubsData = [];\n  $('div.team').each((index, element) => {\n    const clubName = $(element).find('div.clubname > a').text().trim();\n    const clubLogo = $(element).find('div.clublogo > img').attr('src'); // Extraction du logo du club\n    const players = [];\n\n    // Extraction des données des joueurs\n    $(element).find('div.player').each((i, el) => {\n      const playerName = $(el).find('div.playername').text().trim();\n      const playerPosition = $(el).find('div.playerposition').text().trim();\n      const playerPhoto = $(el).find('div.playerphoto > img').attr('src'); // Extraction de la photo du joueur\n\n      players.push({\n        name: playerName,\n        position: playerPosition,\n        photo: playerPhoto\n      });\n    });\n    clubsData.push({\n      name: clubName,\n      logo: clubLogo,\n      // Ajout du logo du club\n      players: players\n    });\n  });\n  return clubsData;\n}\nfunction writeDataToFile(data, filePath) {\n  fs.writeFile(filePath, JSON.stringify(data, null, 2), err => {\n    if (err) throw err;\n    console.log(`Data written to ${filePath}`);\n  });\n}\n\n// Exemple d'utilisation\nconst htmlFilePath = 'example.html'; // Chemin vers le fichier HTML source\nconst outputFilePath = 'output.json'; // Chemin vers le fichier JSON de sortie\n\nfs.readFile(htmlFilePath, 'utf8', (err, html) => {\n  if (err) throw err;\n  const data = extractDataFromHTML(html);\n  writeDataToFile(data, outputFilePath);\n});","map":{"version":3,"names":["fs","require","cheerio","extractDataFromHTML","html","$","load","clubsData","each","index","element","clubName","find","text","trim","clubLogo","attr","players","i","el","playerName","playerPosition","playerPhoto","push","name","position","photo","logo","writeDataToFile","data","filePath","writeFile","JSON","stringify","err","console","log","htmlFilePath","outputFilePath","readFile"],"sources":["C:/perso/IA Sport Vision/frontend/src/components/SearchClub.js"],"sourcesContent":["const fs = require('fs');\r\nconst cheerio = require('cheerio');\r\n\r\nfunction extractDataFromHTML(html) {\r\n    const $ = cheerio.load(html);\r\n\r\n    // Extraction des données des clubs\r\n    const clubsData = [];\r\n    $('div.team').each((index, element) => {\r\n        const clubName = $(element).find('div.clubname > a').text().trim();\r\n        const clubLogo = $(element).find('div.clublogo > img').attr('src'); // Extraction du logo du club\r\n        const players = [];\r\n\r\n        // Extraction des données des joueurs\r\n        $(element).find('div.player').each((i, el) => {\r\n            const playerName = $(el).find('div.playername').text().trim();\r\n            const playerPosition = $(el).find('div.playerposition').text().trim();\r\n            const playerPhoto = $(el).find('div.playerphoto > img').attr('src'); // Extraction de la photo du joueur\r\n\r\n            players.push({\r\n                name: playerName,\r\n                position: playerPosition,\r\n                photo: playerPhoto\r\n            });\r\n        });\r\n\r\n        clubsData.push({\r\n            name: clubName,\r\n            logo: clubLogo, // Ajout du logo du club\r\n            players: players\r\n        });\r\n    });\r\n\r\n    return clubsData;\r\n}\r\n\r\nfunction writeDataToFile(data, filePath) {\r\n    fs.writeFile(filePath, JSON.stringify(data, null, 2), (err) => {\r\n        if (err) throw err;\r\n        console.log(`Data written to ${filePath}`);\r\n    });\r\n}\r\n\r\n// Exemple d'utilisation\r\nconst htmlFilePath = 'example.html'; // Chemin vers le fichier HTML source\r\nconst outputFilePath = 'output.json'; // Chemin vers le fichier JSON de sortie\r\n\r\nfs.readFile(htmlFilePath, 'utf8', (err, html) => {\r\n    if (err) throw err;\r\n    const data = extractDataFromHTML(html);\r\n    writeDataToFile(data, outputFilePath);\r\n});\r\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAElC,SAASE,mBAAmBA,CAACC,IAAI,EAAE;EAC/B,MAAMC,CAAC,GAAGH,OAAO,CAACI,IAAI,CAACF,IAAI,CAAC;;EAE5B;EACA,MAAMG,SAAS,GAAG,EAAE;EACpBF,CAAC,CAAC,UAAU,CAAC,CAACG,IAAI,CAAC,CAACC,KAAK,EAAEC,OAAO,KAAK;IACnC,MAAMC,QAAQ,GAAGN,CAAC,CAACK,OAAO,CAAC,CAACE,IAAI,CAAC,kBAAkB,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IAClE,MAAMC,QAAQ,GAAGV,CAAC,CAACK,OAAO,CAAC,CAACE,IAAI,CAAC,oBAAoB,CAAC,CAACI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACpE,MAAMC,OAAO,GAAG,EAAE;;IAElB;IACAZ,CAAC,CAACK,OAAO,CAAC,CAACE,IAAI,CAAC,YAAY,CAAC,CAACJ,IAAI,CAAC,CAACU,CAAC,EAAEC,EAAE,KAAK;MAC1C,MAAMC,UAAU,GAAGf,CAAC,CAACc,EAAE,CAAC,CAACP,IAAI,CAAC,gBAAgB,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MAC7D,MAAMO,cAAc,GAAGhB,CAAC,CAACc,EAAE,CAAC,CAACP,IAAI,CAAC,oBAAoB,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MACrE,MAAMQ,WAAW,GAAGjB,CAAC,CAACc,EAAE,CAAC,CAACP,IAAI,CAAC,uBAAuB,CAAC,CAACI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;;MAErEC,OAAO,CAACM,IAAI,CAAC;QACTC,IAAI,EAAEJ,UAAU;QAChBK,QAAQ,EAAEJ,cAAc;QACxBK,KAAK,EAAEJ;MACX,CAAC,CAAC;IACN,CAAC,CAAC;IAEFf,SAAS,CAACgB,IAAI,CAAC;MACXC,IAAI,EAAEb,QAAQ;MACdgB,IAAI,EAAEZ,QAAQ;MAAE;MAChBE,OAAO,EAAEA;IACb,CAAC,CAAC;EACN,CAAC,CAAC;EAEF,OAAOV,SAAS;AACpB;AAEA,SAASqB,eAAeA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EACrC9B,EAAE,CAAC+B,SAAS,CAACD,QAAQ,EAAEE,IAAI,CAACC,SAAS,CAACJ,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,EAAGK,GAAG,IAAK;IAC3D,IAAIA,GAAG,EAAE,MAAMA,GAAG;IAClBC,OAAO,CAACC,GAAG,CAAC,mBAAmBN,QAAQ,EAAE,CAAC;EAC9C,CAAC,CAAC;AACN;;AAEA;AACA,MAAMO,YAAY,GAAG,cAAc,CAAC,CAAC;AACrC,MAAMC,cAAc,GAAG,aAAa,CAAC,CAAC;;AAEtCtC,EAAE,CAACuC,QAAQ,CAACF,YAAY,EAAE,MAAM,EAAE,CAACH,GAAG,EAAE9B,IAAI,KAAK;EAC7C,IAAI8B,GAAG,EAAE,MAAMA,GAAG;EAClB,MAAML,IAAI,GAAG1B,mBAAmB,CAACC,IAAI,CAAC;EACtCwB,eAAe,CAACC,IAAI,EAAES,cAAc,CAAC;AACzC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}