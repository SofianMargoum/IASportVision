{"ast":null,"code":"import React,{useState,useEffect}from'react';import{fetchMatchesForClub,fetchClassementJournees}from'./../api';// Import des fonctions API\nimport config from'./../../config';// Import de votre fichier de configuration\nimport'./css/ClassementsContent.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ClassementsContent(){const[classements,setClassements]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const selectedCompetition=config.getSelectedCompetition();useEffect(()=>{const selectedClub=config.getSelectedClub();if(selectedClub){const fetchData=async()=>{try{// Étape 1 : Récupérer les matches du club à l'aide de l'API fetchMatchesForClub\nconst matches=await fetchMatchesForClub(selectedClub.cl_no);// Étape 2 : Trouver le premier match correspondant à la compétition sélectionnée\nlet foundMatch=null;for(const match of matches){if(match.competitionName===selectedCompetition){foundMatch=match;// On stocke le match correspondant\nbreak;// Sortir de la boucle dès qu'on trouve une correspondance\n}}if(foundMatch){// Extraire les informations competitionId, phaseId, pouleId du match trouvé\nconst competitionId=foundMatch.competitionNumber;const phaseId=foundMatch.phaseNumber;const pouleId=foundMatch.pouleNumber;// Récupérer le classement\nconst classementsData=await fetchClassementJournees(competitionId,phaseId,pouleId);setClassements(classementsData);}else{throw new Error('Aucun match trouvé pour la compétition sélectionnée.');}setLoading(false);}catch(error){setError(error);setLoading(false);}};fetchData();}else{setError(new Error('Aucun club sélectionné.'));setLoading(false);}// Écouter les changements du club sélectionné\nconfig.onClubChange(club=>{// Lorsque le club change, relancer la récupération des données\nsetLoading(true);setError(null);setClassements([]);// Relancer la récupération des données pour le nouveau club\nconst fetchNewData=async()=>{try{const matches=await fetchMatchesForClub(club.cl_no);let foundMatch=null;for(const match of matches){if(match.competitionName===selectedCompetition){foundMatch=match;break;}}if(foundMatch){const competitionId=foundMatch.competitionNumber;const phaseId=foundMatch.phaseNumber;const pouleId=foundMatch.pouleNumber;const classementsData=await fetchClassementJournees(competitionId,phaseId,pouleId);setClassements(classementsData);}else{throw new Error('Aucun match trouvé pour la compétition sélectionnée.');}setLoading(false);}catch(error){setError(error);setLoading(false);}};fetchNewData();});},[]);if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Chargement des classements...\"});}if(error){return/*#__PURE__*/_jsxs(\"div\",{children:[\"Erreur lors du chargement des classements : \",error.message]});}return/*#__PURE__*/_jsx(\"div\",{className:\"classement-content\",children:classements.length>0?/*#__PURE__*/_jsxs(\"table\",{className:\"classement-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Rang\"}),\" \",/*#__PURE__*/_jsx(\"th\",{children:\"Club\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Pts\"}),/*#__PURE__*/_jsx(\"th\",{children:\"MJ\"}),/*#__PURE__*/_jsx(\"th\",{children:\"G\"}),/*#__PURE__*/_jsx(\"th\",{children:\"N\"}),/*#__PURE__*/_jsx(\"th\",{children:\"P\"}),/*#__PURE__*/_jsx(\"th\",{children:\"BP\"}),\" \",/*#__PURE__*/_jsx(\"th\",{children:\"BC\"}),\" \",/*#__PURE__*/_jsx(\"th\",{children:\"DB\"}),\" \"]})}),/*#__PURE__*/_jsx(\"tbody\",{children:classements.map((journee,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[\" \",/*#__PURE__*/_jsx(\"td\",{children:journee.rank}),\" \",/*#__PURE__*/_jsx(\"td\",{className:\"team-column\",children:journee.teamName}),/*#__PURE__*/_jsx(\"td\",{className:\"points-column\",children:journee.points}),/*#__PURE__*/_jsx(\"td\",{children:journee.totalGames}),/*#__PURE__*/_jsx(\"td\",{children:journee.wonGames}),/*#__PURE__*/_jsx(\"td\",{children:journee.drawGames}),/*#__PURE__*/_jsx(\"td\",{children:journee.lostGames}),/*#__PURE__*/_jsx(\"td\",{children:journee.goalsFor}),\" \",/*#__PURE__*/_jsx(\"td\",{children:journee.goalsAgainst}),\" \",/*#__PURE__*/_jsx(\"td\",{children:journee.goalDifference}),\" \"]},journee.teamName))})]}):/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:\"Aucun classement disponible pour le moment.\"})});}export default ClassementsContent;","map":{"version":3,"names":["React","useState","useEffect","fetchMatchesForClub","fetchClassementJournees","config","jsx","_jsx","jsxs","_jsxs","ClassementsContent","classements","setClassements","loading","setLoading","error","setError","selectedCompetition","getSelectedCompetition","selectedClub","getSelectedClub","fetchData","matches","cl_no","foundMatch","match","competitionName","competitionId","competitionNumber","phaseId","phaseNumber","pouleId","pouleNumber","classementsData","Error","onClubChange","club","fetchNewData","children","message","className","length","map","journee","index","rank","teamName","points","totalGames","wonGames","drawGames","lostGames","goalsFor","goalsAgainst","goalDifference"],"sources":["C:/perso/IA Sport Vision/Application/IASV/src/components/Resultat/ClassementsContent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchMatchesForClub, fetchClassementJournees } from './../api'; // Import des fonctions API\r\nimport config from './../../config'; // Import de votre fichier de configuration\r\nimport './css/ClassementsContent.css';\r\n\r\nfunction ClassementsContent() {\r\n  const [classements, setClassements] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const selectedCompetition = config.getSelectedCompetition();\r\n\r\n  useEffect(() => {\r\n    const selectedClub = config.getSelectedClub();\r\n\r\n    if (selectedClub) {\r\n      const fetchData = async () => {\r\n        try {\r\n          // Étape 1 : Récupérer les matches du club à l'aide de l'API fetchMatchesForClub\r\n          const matches = await fetchMatchesForClub(selectedClub.cl_no);\r\n\r\n          // Étape 2 : Trouver le premier match correspondant à la compétition sélectionnée\r\n          let foundMatch = null;\r\n          for (const match of matches) {\r\n            if (match.competitionName === selectedCompetition) {\r\n              foundMatch = match; // On stocke le match correspondant\r\n              break; // Sortir de la boucle dès qu'on trouve une correspondance\r\n            }\r\n          }\r\n\r\n          if (foundMatch) {\r\n            // Extraire les informations competitionId, phaseId, pouleId du match trouvé\r\n            const competitionId = foundMatch.competitionNumber;\r\n            const phaseId = foundMatch.phaseNumber;\r\n            const pouleId = foundMatch.pouleNumber;\r\n\r\n            // Récupérer le classement\r\n            const classementsData = await fetchClassementJournees(\r\n              competitionId,\r\n              phaseId,\r\n              pouleId\r\n            );\r\n            setClassements(classementsData);\r\n          } else {\r\n            throw new Error('Aucun match trouvé pour la compétition sélectionnée.');\r\n          }\r\n\r\n          setLoading(false);\r\n        } catch (error) {\r\n          setError(error);\r\n          setLoading(false);\r\n        }\r\n      };\r\n\r\n      fetchData();\r\n    } else {\r\n      setError(new Error('Aucun club sélectionné.'));\r\n      setLoading(false);\r\n    }\r\n\r\n    // Écouter les changements du club sélectionné\r\n    config.onClubChange((club) => {\r\n      // Lorsque le club change, relancer la récupération des données\r\n      setLoading(true);\r\n      setError(null);\r\n      setClassements([]);\r\n      \r\n      // Relancer la récupération des données pour le nouveau club\r\n      const fetchNewData = async () => {\r\n        try {\r\n          const matches = await fetchMatchesForClub(club.cl_no);\r\n          let foundMatch = null;\r\n          for (const match of matches) {\r\n            if (match.competitionName === selectedCompetition) {\r\n              foundMatch = match;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (foundMatch) {\r\n            const competitionId = foundMatch.competitionNumber;\r\n            const phaseId = foundMatch.phaseNumber;\r\n            const pouleId = foundMatch.pouleNumber;\r\n\r\n            const classementsData = await fetchClassementJournees(\r\n              competitionId,\r\n              phaseId,\r\n              pouleId\r\n            );\r\n            setClassements(classementsData);\r\n          } else {\r\n            throw new Error('Aucun match trouvé pour la compétition sélectionnée.');\r\n          }\r\n          setLoading(false);\r\n        } catch (error) {\r\n          setError(error);\r\n          setLoading(false);\r\n        }\r\n      };\r\n      \r\n      fetchNewData();\r\n    });\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Chargement des classements...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Erreur lors du chargement des classements : {error.message}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"classement-content\">\r\n      {classements.length > 0 ? (\r\n        <table className=\"classement-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Rang</th> {/* Classement / Rang */}\r\n              <th>Club</th>\r\n              <th>Pts</th>\r\n              <th>MJ</th>\r\n              <th>G</th>\r\n              <th>N</th>\r\n              <th>P</th>\r\n              <th>BP</th> {/* Buts pour */}\r\n              <th>BC</th> {/* Buts contre */}\r\n              <th>DB</th> {/* Différence de buts */}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {classements.map((journee, index) => (\r\n              <tr key={journee.teamName}> {/* Utilisation de teamName comme key pour éviter index */}\r\n                <td>{journee.rank}</td> {/* Classement/Rang */}\r\n                <td className=\"team-column\">{journee.teamName}</td>\r\n                <td className=\"points-column\">{journee.points}</td>\r\n                <td>{journee.totalGames}</td>\r\n                <td>{journee.wonGames}</td>\r\n                <td>{journee.drawGames}</td>\r\n                <td>{journee.lostGames}</td>\r\n                <td>{journee.goalsFor}</td> {/* Buts pour */}\r\n                <td>{journee.goalsAgainst}</td> {/* Buts contre */}\r\n                <td>{journee.goalDifference}</td> {/* Différence de buts */}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      ) : (\r\n        <p className=\"error\">Aucun classement disponible pour le moment.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClassementsContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}