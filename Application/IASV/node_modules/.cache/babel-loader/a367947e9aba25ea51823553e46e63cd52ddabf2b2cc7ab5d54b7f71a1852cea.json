{"ast":null,"code":"import React,{useState,useEffect,useRef,useMemo}from'react';import{fetchMatchesForClub}from'./../api';// Assurez-vous que le chemin d'importation est correct\nimport'./css/MatchsContent.css';// Importation du CSS\nimport config from'../../config';// Import du fichier config.js\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function MatchsContent(){const[matches,setMatches]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const matchRefs=useRef([]);const[selectedClub,setSelectedClub]=useState(config.getSelectedClub());// Initialiser avec le club sélectionné\nconst[selectedCompetition,setSelectedCompetition]=useState(config.getSelectedCompetition());// Initialiser avec la compétition sélectionnée\nuseEffect(()=>{// Fonction pour charger les matchs\nconst loadMatches=async()=>{setLoading(true);try{if(selectedClub&&selectedClub.cl_no){// Vérifier si le club est bien défini\nconst data=await fetchMatchesForClub(selectedClub.cl_no);setMatches(data);}}catch(error){setError('Erreur lors de la récupération des matchs.');}finally{setLoading(false);}};// Charger les matchs au démarrage et lorsque le club change\nif(selectedClub&&selectedClub.cl_no){loadMatches();}// Écouter les changements de club et de compétition\nconst handleClubChange=club=>{setSelectedClub(club);setMatches([]);// Réinitialiser les matchs lors du changement de club\n};const handleCompetitionChange=competition=>{setSelectedCompetition(competition);};// Ajouter les gestionnaires d'événements\nconfig.onClubChange(handleClubChange);config.onCompetitionChange(handleCompetitionChange);// Nettoyer les gestionnaires d'événements lors du démontage du composant\nreturn()=>{config.onClubChange(()=>{});config.onCompetitionChange(()=>{});};},[selectedClub]);const filteredMatches=useMemo(()=>{return matches.filter(match=>match.homeTeam===selectedClub.name&&match.homeCompetitionName===selectedCompetition||match.awayTeam===selectedClub.name&&match.awayCompetitionName===selectedCompetition);},[matches,selectedClub.name,selectedCompetition]);useEffect(()=>{if(filteredMatches.length>0){const today=new Date();const latestMatchIndex=filteredMatches.reduce((latestIndex,match,index)=>{const matchDate=new Date(match.date);return matchDate<today&&(latestIndex===-1||matchDate>new Date(filteredMatches[latestIndex].date))?index:latestIndex;},-1);if(latestMatchIndex>=0&&matchRefs.current[latestMatchIndex]){matchRefs.current[latestMatchIndex].scrollIntoView({behavior:'smooth',block:'start'});}}},[filteredMatches]);if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Chargement des matchs...\"});}if(error){return/*#__PURE__*/_jsxs(\"div\",{className:\"error\",children:[\"Erreur : \",error]});}return/*#__PURE__*/_jsx(\"div\",{className:\"tab-content\",children:filteredMatches.length===0?/*#__PURE__*/_jsxs(\"p\",{className:\"error\",children:[\"Aucun match trouv\\xE9 pour \",selectedClub.name,\" \\xE0 domicile.\"]}):/*#__PURE__*/_jsxs(\"div\",{className:\"scroll-container\",children:[\" \",filteredMatches.map((match,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"match-item\",ref:el=>matchRefs.current[index]=el,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"match-date\",children:[new Date(match.date).toLocaleDateString(),\" - \",match.time,\" - \",match.competitionName]}),/*#__PURE__*/_jsxs(\"div\",{className:\"match-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"match-details-team\",children:[/*#__PURE__*/_jsx(\"img\",{src:match.homeLogo,alt:\"\".concat(match.homeTeam,\" logo\"),className:\"team-logo\"}),match.homeTeam]}),/*#__PURE__*/_jsx(\"div\",{className:\"match-score\",children:match.home_score}),/*#__PURE__*/_jsxs(\"div\",{className:\"match-details-team\",children:[/*#__PURE__*/_jsx(\"img\",{src:match.awayLogo,alt:\"\".concat(match.awayTeam,\" logo\"),className:\"team-logo\"}),match.awayTeam]}),/*#__PURE__*/_jsx(\"div\",{className:\"match-score\",children:match.away_score})]})]},match.id))]})});}export default MatchsContent;","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","fetchMatchesForClub","config","jsx","_jsx","jsxs","_jsxs","MatchsContent","matches","setMatches","loading","setLoading","error","setError","matchRefs","selectedClub","setSelectedClub","getSelectedClub","selectedCompetition","setSelectedCompetition","getSelectedCompetition","loadMatches","cl_no","data","handleClubChange","club","handleCompetitionChange","competition","onClubChange","onCompetitionChange","filteredMatches","filter","match","homeTeam","name","homeCompetitionName","awayTeam","awayCompetitionName","length","today","Date","latestMatchIndex","reduce","latestIndex","index","matchDate","date","current","scrollIntoView","behavior","block","className","children","map","ref","el","toLocaleDateString","time","competitionName","src","homeLogo","alt","concat","home_score","awayLogo","away_score","id"],"sources":["C:/perso/IA Sport Vision/Application/IASV/src/components/Resultat/MatchsContent.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { fetchMatchesForClub } from './../api'; // Assurez-vous que le chemin d'importation est correct\r\nimport './css/MatchsContent.css'; // Importation du CSS\r\nimport config from '../../config';  // Import du fichier config.js\r\n\r\nfunction MatchsContent() {\r\n  const [matches, setMatches] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const matchRefs = useRef([]);\r\n  const [selectedClub, setSelectedClub] = useState(config.getSelectedClub());  // Initialiser avec le club sélectionné\r\n  const [selectedCompetition, setSelectedCompetition] = useState(config.getSelectedCompetition());  // Initialiser avec la compétition sélectionnée\r\n\r\n  useEffect(() => {\r\n    // Fonction pour charger les matchs\r\n    const loadMatches = async () => {\r\n      setLoading(true);\r\n      try {\r\n        if (selectedClub && selectedClub.cl_no) {  // Vérifier si le club est bien défini\r\n          const data = await fetchMatchesForClub(selectedClub.cl_no);\r\n          setMatches(data);\r\n        }\r\n      } catch (error) {\r\n        setError('Erreur lors de la récupération des matchs.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Charger les matchs au démarrage et lorsque le club change\r\n    if (selectedClub && selectedClub.cl_no) {\r\n      loadMatches();\r\n    }\r\n\r\n    // Écouter les changements de club et de compétition\r\n    const handleClubChange = (club) => {\r\n      setSelectedClub(club);\r\n      setMatches([]);  // Réinitialiser les matchs lors du changement de club\r\n    };\r\n\r\n    const handleCompetitionChange = (competition) => {\r\n      setSelectedCompetition(competition);\r\n    };\r\n\r\n    // Ajouter les gestionnaires d'événements\r\n    config.onClubChange(handleClubChange);\r\n    config.onCompetitionChange(handleCompetitionChange);\r\n\r\n    // Nettoyer les gestionnaires d'événements lors du démontage du composant\r\n    return () => {\r\n      config.onClubChange(() => {});\r\n      config.onCompetitionChange(() => {});\r\n    };\r\n  }, [selectedClub]);\r\n\r\n  const filteredMatches = useMemo(() => {\r\n    return matches.filter(\r\n      match =>\r\n        (match.homeTeam === selectedClub.name && match.homeCompetitionName === selectedCompetition) ||\r\n        (match.awayTeam === selectedClub.name && match.awayCompetitionName === selectedCompetition)\r\n    );\r\n  }, [matches, selectedClub.name, selectedCompetition]);\r\n\r\n  useEffect(() => {\r\n    if (filteredMatches.length > 0) {\r\n      const today = new Date();\r\n      const latestMatchIndex = filteredMatches.reduce((latestIndex, match, index) => {\r\n        const matchDate = new Date(match.date);\r\n        return matchDate < today && (latestIndex === -1 || matchDate > new Date(filteredMatches[latestIndex].date))\r\n          ? index\r\n          : latestIndex;\r\n      }, -1);\r\n\r\n      if (latestMatchIndex >= 0 && matchRefs.current[latestMatchIndex]) {\r\n        matchRefs.current[latestMatchIndex].scrollIntoView({\r\n          behavior: 'smooth',\r\n          block: 'start',\r\n        });\r\n      }\r\n    }\r\n  }, [filteredMatches]);\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Chargement des matchs...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">Erreur : {error}</div>;\r\n  }\r\n\r\nreturn (\r\n  <div className=\"tab-content\">\r\n    {filteredMatches.length === 0 ? (\r\n      <p className=\"error\">Aucun match trouvé pour {selectedClub.name} à domicile.</p>\r\n    ) : (\r\n      <div className=\"scroll-container\"> {/* Ajout de la classe scroll-container */}\r\n        {filteredMatches.map((match, index) => (\r\n          <div\r\n            key={match.id}\r\n            className=\"match-item\"\r\n            ref={el => matchRefs.current[index] = el}\r\n          >\r\n            <div className=\"match-date\">\r\n              {new Date(match.date).toLocaleDateString()} - {match.time} - {match.competitionName}\r\n            </div>\r\n            <div className=\"match-content\">\r\n              <div className=\"match-details-team\">\r\n                <img src={match.homeLogo} alt={`${match.homeTeam} logo`} className=\"team-logo\" />\r\n                {match.homeTeam}\r\n              </div>\r\n              <div className=\"match-score\">\r\n                {match.home_score}\r\n              </div>\r\n              <div className=\"match-details-team\">\r\n                <img src={match.awayLogo} alt={`${match.awayTeam} logo`} className=\"team-logo\" />\r\n                {match.awayTeam}\r\n              </div>\r\n              <div className=\"match-score\">\r\n                {match.away_score}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\n\r\n\r\n}\r\n\r\nexport default MatchsContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}