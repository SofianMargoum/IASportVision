{"version":3,"file":"static/js/626.601ab8c7.chunk.js","mappings":"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","sources":["components/Resultat/MatchsContent.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { fetchMatchesForClub } from './../api'; // Assurez-vous que le chemin d'importation est correct\r\nimport './css/MatchsContent.css'; // Importation du CSS\r\nimport config from '../../config';  // Import du fichier config.js\r\n\r\nfunction MatchsContent() {\r\n  const [matches, setMatches] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const matchRefs = useRef([]);\r\n  const [selectedClub, setSelectedClub] = useState(config.getSelectedClub());  // Initialiser avec le club sélectionné\r\n  const [selectedCompetition, setSelectedCompetition] = useState(config.getSelectedCompetition());  // Initialiser avec la compétition sélectionnée\r\n\r\n  useEffect(() => {\r\n    // Fonction pour charger les matchs\r\n    const loadMatches = async () => {\r\n      setLoading(true);\r\n      try {\r\n        if (selectedClub && selectedClub.cl_no) {  // Vérifier si le club est bien défini\r\n          const data = await fetchMatchesForClub(selectedClub.cl_no);\r\n          setMatches(data);\r\n        }\r\n      } catch (error) {\r\n        setError('Erreur lors de la récupération des matchs.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Charger les matchs au démarrage et lorsque le club change\r\n    if (selectedClub && selectedClub.cl_no) {\r\n      loadMatches();\r\n    }\r\n\r\n    // Écouter les changements de club et de compétition\r\n    const handleClubChange = (club) => {\r\n      setSelectedClub(club);\r\n      setMatches([]);  // Réinitialiser les matchs lors du changement de club\r\n    };\r\n\r\n    const handleCompetitionChange = (competition) => {\r\n      setSelectedCompetition(competition);\r\n    };\r\n\r\n    // Ajouter les gestionnaires d'événements\r\n    config.onClubChange(handleClubChange);\r\n    config.onCompetitionChange(handleCompetitionChange);\r\n\r\n    // Nettoyer les gestionnaires d'événements lors du démontage du composant\r\n    return () => {\r\n      config.onClubChange(() => {});\r\n      config.onCompetitionChange(() => {});\r\n    };\r\n  }, [selectedClub]);\r\n\r\n  const filteredMatches = useMemo(() => {\r\n    return matches.filter(\r\n      match =>\r\n        (match.homeTeam === selectedClub.name && match.homeCompetitionName === selectedCompetition) ||\r\n        (match.awayTeam === selectedClub.name && match.awayCompetitionName === selectedCompetition)\r\n    );\r\n  }, [matches, selectedClub.name, selectedCompetition]);\r\n\r\n  useEffect(() => {\r\n    if (filteredMatches.length > 0) {\r\n      const today = new Date();\r\n      const latestMatchIndex = filteredMatches.reduce((latestIndex, match, index) => {\r\n        const matchDate = new Date(match.date);\r\n        return matchDate < today && (latestIndex === -1 || matchDate > new Date(filteredMatches[latestIndex].date))\r\n          ? index\r\n          : latestIndex;\r\n      }, -1);\r\n\r\n      if (latestMatchIndex >= 0 && matchRefs.current[latestMatchIndex]) {\r\n        matchRefs.current[latestMatchIndex].scrollIntoView({\r\n          behavior: 'smooth',\r\n          block: 'start',\r\n        });\r\n      }\r\n    }\r\n  }, [filteredMatches]);\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Chargement des matchs...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"error\">Erreur : {error}</div>;\r\n  }\r\n\r\nreturn (\r\n  <div className=\"tab-content\">\r\n    {filteredMatches.length === 0 ? (\r\n      <p className=\"error\">Aucun match trouvé pour {selectedClub.name} à domicile.</p>\r\n    ) : (\r\n      <div className=\"scroll-container\"> {/* Ajout de la classe scroll-container */}\r\n        {filteredMatches.map((match, index) => (\r\n          <div\r\n            key={match.id}\r\n            className=\"match-item\"\r\n            ref={el => matchRefs.current[index] = el}\r\n          >\r\n            <div className=\"match-date\">\r\n              {new Date(match.date).toLocaleDateString()} - {match.time} - {match.competitionName}\r\n            </div>\r\n            <div className=\"match-content\">\r\n              <div className=\"match-details-team\">\r\n                <img src={match.homeLogo} alt={`${match.homeTeam} logo`} className=\"team-logo\" />\r\n                {match.homeTeam}\r\n              </div>\r\n              <div className=\"match-score\">\r\n                {match.home_score}\r\n              </div>\r\n              <div className=\"match-details-team\">\r\n                <img src={match.awayLogo} alt={`${match.awayTeam} logo`} className=\"team-logo\" />\r\n                {match.awayTeam}\r\n              </div>\r\n              <div className=\"match-score\">\r\n                {match.away_score}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\n\r\n\r\n}\r\n\r\nexport default MatchsContent;\r\n"],"names":["matches","setMatches","useState","loading","setLoading","error","setError","matchRefs","useRef","selectedClub","setSelectedClub","config","selectedCompetition","setSelectedCompetition","useEffect","cl_no","async","data","fetchMatchesForClub","loadMatches","club","competition","filteredMatches","useMemo","filter","match","homeTeam","name","homeCompetitionName","awayTeam","awayCompetitionName","length","today","Date","latestMatchIndex","reduce","latestIndex","index","matchDate","date","current","scrollIntoView","behavior","block","_jsx","className","children","_jsxs","map","ref","el","toLocaleDateString","time","competitionName","src","homeLogo","alt","concat","home_score","awayLogo","away_score","id"],"sourceRoot":""}